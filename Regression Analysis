{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "DtNBZFHO3M7n"
   },
   "source": [
    "# **Regression Analysis**\n",
    "**The goal** is to build a multiple linear regression model and evaluate the model for ride fares based on a variety of variables.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "D8qYlvkLQsf2"
   },
   "source": [
    "### Task 1. Imports and loading\n",
    "Import the packages that you've learned are needed for building linear regression models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "ccfeg6X6eOVZ"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import statsmodels.api as sm\n",
    "from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "TyR3sBUYJBO8"
   },
   "outputs": [],
   "source": [
    "# Load dataset into dataframe \n",
    "df0=pd.read_csv(\"2017_Yellow_Taxi_Trip_Data.csv\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rIcDG2e66wt9"
   },
   "source": [
    "### Task 2a. Explore data with EDA\n",
    "\n",
    "Analyze and discover data, looking for correlations, missing data, outliers, and duplicates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "T4Ag-sZhWg6K"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 22699 entries, 0 to 22698\n",
      "Data columns (total 18 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   Unnamed: 0             22699 non-null  int64  \n",
      " 1   VendorID               22699 non-null  int64  \n",
      " 2   tpep_pickup_datetime   22699 non-null  object \n",
      " 3   tpep_dropoff_datetime  22699 non-null  object \n",
      " 4   passenger_count        22699 non-null  int64  \n",
      " 5   trip_distance          22699 non-null  float64\n",
      " 6   RatecodeID             22699 non-null  int64  \n",
      " 7   store_and_fwd_flag     22699 non-null  object \n",
      " 8   PULocationID           22699 non-null  int64  \n",
      " 9   DOLocationID           22699 non-null  int64  \n",
      " 10  payment_type           22699 non-null  int64  \n",
      " 11  fare_amount            22699 non-null  float64\n",
      " 12  extra                  22699 non-null  float64\n",
      " 13  mta_tax                22699 non-null  float64\n",
      " 14  tip_amount             22699 non-null  float64\n",
      " 15  tolls_amount           22699 non-null  float64\n",
      " 16  improvement_surcharge  22699 non-null  float64\n",
      " 17  total_amount           22699 non-null  float64\n",
      "dtypes: float64(8), int64(7), object(3)\n",
      "memory usage: 3.1+ MB\n"
     ]
    }
   ],
   "source": [
    "# Check for data type\n",
    "df0.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "3QZZIxxi3OV3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0               0\n",
       "VendorID                 0\n",
       "tpep_pickup_datetime     0\n",
       "tpep_dropoff_datetime    0\n",
       "passenger_count          0\n",
       "trip_distance            0\n",
       "RatecodeID               0\n",
       "store_and_fwd_flag       0\n",
       "PULocationID             0\n",
       "DOLocationID             0\n",
       "payment_type             0\n",
       "fare_amount              0\n",
       "extra                    0\n",
       "mta_tax                  0\n",
       "tip_amount               0\n",
       "tolls_amount             0\n",
       "improvement_surcharge    0\n",
       "total_amount             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for missing data\n",
    "df0.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "id": "3QZZIxxi3OV3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for duplicates\n",
    "df0.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "2O3b9H9B9nwk"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>PULocationID</th>\n",
       "      <th>DOLocationID</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.269900e+04</td>\n",
       "      <td>22699.000000</td>\n",
       "      <td>22699</td>\n",
       "      <td>22699</td>\n",
       "      <td>22699.000000</td>\n",
       "      <td>22699.000000</td>\n",
       "      <td>22699.000000</td>\n",
       "      <td>22699</td>\n",
       "      <td>22699.000000</td>\n",
       "      <td>22699.000000</td>\n",
       "      <td>22699.000000</td>\n",
       "      <td>22699.000000</td>\n",
       "      <td>22699.000000</td>\n",
       "      <td>22699.000000</td>\n",
       "      <td>22699.000000</td>\n",
       "      <td>22699.000000</td>\n",
       "      <td>22699.000000</td>\n",
       "      <td>22699.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22687</td>\n",
       "      <td>22688</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>07/03/2017 3:45:19 PM</td>\n",
       "      <td>10/18/2017 8:07:45 PM</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22600</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.675849e+07</td>\n",
       "      <td>1.556236</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.642319</td>\n",
       "      <td>2.913313</td>\n",
       "      <td>1.043394</td>\n",
       "      <td>NaN</td>\n",
       "      <td>162.412353</td>\n",
       "      <td>161.527997</td>\n",
       "      <td>1.336887</td>\n",
       "      <td>13.026629</td>\n",
       "      <td>0.333275</td>\n",
       "      <td>0.497445</td>\n",
       "      <td>1.835781</td>\n",
       "      <td>0.312542</td>\n",
       "      <td>0.299551</td>\n",
       "      <td>16.310502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.274493e+07</td>\n",
       "      <td>0.496838</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.285231</td>\n",
       "      <td>3.653171</td>\n",
       "      <td>0.708391</td>\n",
       "      <td>NaN</td>\n",
       "      <td>66.633373</td>\n",
       "      <td>70.139691</td>\n",
       "      <td>0.496211</td>\n",
       "      <td>13.243791</td>\n",
       "      <td>0.463097</td>\n",
       "      <td>0.039465</td>\n",
       "      <td>2.800626</td>\n",
       "      <td>1.399212</td>\n",
       "      <td>0.015673</td>\n",
       "      <td>16.097295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.212700e+04</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-120.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.300000</td>\n",
       "      <td>-120.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.852056e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.990000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>112.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>8.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.673150e+07</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.610000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>162.000000</td>\n",
       "      <td>162.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>1.350000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>11.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.537452e+07</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.060000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>233.000000</td>\n",
       "      <td>233.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>14.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>2.450000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>17.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.134863e+08</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>33.960000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>265.000000</td>\n",
       "      <td>265.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>999.990000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>19.100000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>1200.290000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Unnamed: 0      VendorID   tpep_pickup_datetime  \\\n",
       "count   2.269900e+04  22699.000000                  22699   \n",
       "unique           NaN           NaN                  22687   \n",
       "top              NaN           NaN  07/03/2017 3:45:19 PM   \n",
       "freq             NaN           NaN                      2   \n",
       "mean    5.675849e+07      1.556236                    NaN   \n",
       "std     3.274493e+07      0.496838                    NaN   \n",
       "min     1.212700e+04      1.000000                    NaN   \n",
       "25%     2.852056e+07      1.000000                    NaN   \n",
       "50%     5.673150e+07      2.000000                    NaN   \n",
       "75%     8.537452e+07      2.000000                    NaN   \n",
       "max     1.134863e+08      2.000000                    NaN   \n",
       "\n",
       "        tpep_dropoff_datetime  passenger_count  trip_distance    RatecodeID  \\\n",
       "count                   22699     22699.000000   22699.000000  22699.000000   \n",
       "unique                  22688              NaN            NaN           NaN   \n",
       "top     10/18/2017 8:07:45 PM              NaN            NaN           NaN   \n",
       "freq                        2              NaN            NaN           NaN   \n",
       "mean                      NaN         1.642319       2.913313      1.043394   \n",
       "std                       NaN         1.285231       3.653171      0.708391   \n",
       "min                       NaN         0.000000       0.000000      1.000000   \n",
       "25%                       NaN         1.000000       0.990000      1.000000   \n",
       "50%                       NaN         1.000000       1.610000      1.000000   \n",
       "75%                       NaN         2.000000       3.060000      1.000000   \n",
       "max                       NaN         6.000000      33.960000     99.000000   \n",
       "\n",
       "       store_and_fwd_flag  PULocationID  DOLocationID  payment_type  \\\n",
       "count               22699  22699.000000  22699.000000  22699.000000   \n",
       "unique                  2           NaN           NaN           NaN   \n",
       "top                     N           NaN           NaN           NaN   \n",
       "freq                22600           NaN           NaN           NaN   \n",
       "mean                  NaN    162.412353    161.527997      1.336887   \n",
       "std                   NaN     66.633373     70.139691      0.496211   \n",
       "min                   NaN      1.000000      1.000000      1.000000   \n",
       "25%                   NaN    114.000000    112.000000      1.000000   \n",
       "50%                   NaN    162.000000    162.000000      1.000000   \n",
       "75%                   NaN    233.000000    233.000000      2.000000   \n",
       "max                   NaN    265.000000    265.000000      4.000000   \n",
       "\n",
       "         fare_amount         extra       mta_tax    tip_amount  tolls_amount  \\\n",
       "count   22699.000000  22699.000000  22699.000000  22699.000000  22699.000000   \n",
       "unique           NaN           NaN           NaN           NaN           NaN   \n",
       "top              NaN           NaN           NaN           NaN           NaN   \n",
       "freq             NaN           NaN           NaN           NaN           NaN   \n",
       "mean       13.026629      0.333275      0.497445      1.835781      0.312542   \n",
       "std        13.243791      0.463097      0.039465      2.800626      1.399212   \n",
       "min      -120.000000     -1.000000     -0.500000      0.000000      0.000000   \n",
       "25%         6.500000      0.000000      0.500000      0.000000      0.000000   \n",
       "50%         9.500000      0.000000      0.500000      1.350000      0.000000   \n",
       "75%        14.500000      0.500000      0.500000      2.450000      0.000000   \n",
       "max       999.990000      4.500000      0.500000    200.000000     19.100000   \n",
       "\n",
       "        improvement_surcharge  total_amount  \n",
       "count            22699.000000  22699.000000  \n",
       "unique                    NaN           NaN  \n",
       "top                       NaN           NaN  \n",
       "freq                      NaN           NaN  \n",
       "mean                 0.299551     16.310502  \n",
       "std                  0.015673     16.097295  \n",
       "min                 -0.300000   -120.300000  \n",
       "25%                  0.300000      8.750000  \n",
       "50%                  0.300000     11.800000  \n",
       "75%                  0.300000     17.800000  \n",
       "max                  0.300000   1200.290000  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for unusual data\n",
    "df0.describe(include='all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total data size:  22699\n",
      "Unusual data size:  14\n",
      "Unusual data size porpotion:  0.0006167672584695361\n"
     ]
    }
   ],
   "source": [
    "# Check unusual data size\n",
    "mask = ((df0[\"fare_amount\"] < 0) | (df0[\"extra\"] < 0) | (df0[\"mta_tax\"] < 0) | (df0[\"improvement_surcharge\"] < 0) | (df0[\"total_amount\"] < 0))\n",
    "print(\"total data size: \", len(df0))\n",
    "print(\"Unusual data size: \", len(df0[mask]))\n",
    "print(\"Unusual data size porpotion: \", len(df0[mask])/len(df0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: Identified some unexpected data points (e.g., negative fare amounts). Given their limited quantity, we opted to remove them to minimize their impact on following analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>VendorID</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>PULocationID</th>\n",
       "      <th>DOLocationID</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.268500e+04</td>\n",
       "      <td>22685.000000</td>\n",
       "      <td>22685.000000</td>\n",
       "      <td>22685.000000</td>\n",
       "      <td>22685.000000</td>\n",
       "      <td>22685.000000</td>\n",
       "      <td>22685.000000</td>\n",
       "      <td>22685.000000</td>\n",
       "      <td>22685.000000</td>\n",
       "      <td>22685.000000</td>\n",
       "      <td>22685.000000</td>\n",
       "      <td>22685.000000</td>\n",
       "      <td>22685.000000</td>\n",
       "      <td>22685.000000</td>\n",
       "      <td>22685.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.675861e+07</td>\n",
       "      <td>1.555962</td>\n",
       "      <td>1.642231</td>\n",
       "      <td>2.914952</td>\n",
       "      <td>1.043244</td>\n",
       "      <td>162.421732</td>\n",
       "      <td>161.544545</td>\n",
       "      <td>1.335552</td>\n",
       "      <td>13.041876</td>\n",
       "      <td>0.333723</td>\n",
       "      <td>0.498038</td>\n",
       "      <td>1.836914</td>\n",
       "      <td>0.312734</td>\n",
       "      <td>0.299921</td>\n",
       "      <td>16.328490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.274427e+07</td>\n",
       "      <td>0.496869</td>\n",
       "      <td>1.285034</td>\n",
       "      <td>3.653698</td>\n",
       "      <td>0.708122</td>\n",
       "      <td>66.632736</td>\n",
       "      <td>70.136002</td>\n",
       "      <td>0.493288</td>\n",
       "      <td>13.212569</td>\n",
       "      <td>0.462812</td>\n",
       "      <td>0.031257</td>\n",
       "      <td>2.801119</td>\n",
       "      <td>1.399622</td>\n",
       "      <td>0.004878</td>\n",
       "      <td>16.068902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.212700e+04</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.852087e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.990000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>114.000000</td>\n",
       "      <td>112.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>8.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.673150e+07</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.610000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>162.000000</td>\n",
       "      <td>162.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>1.350000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>11.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.537404e+07</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.070000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>233.000000</td>\n",
       "      <td>233.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>14.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>2.450000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>17.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.134863e+08</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>33.960000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>265.000000</td>\n",
       "      <td>265.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>999.990000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>19.100000</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>1200.290000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Unnamed: 0      VendorID  passenger_count  trip_distance  \\\n",
       "count  2.268500e+04  22685.000000     22685.000000   22685.000000   \n",
       "mean   5.675861e+07      1.555962         1.642231       2.914952   \n",
       "std    3.274427e+07      0.496869         1.285034       3.653698   \n",
       "min    1.212700e+04      1.000000         0.000000       0.000000   \n",
       "25%    2.852087e+07      1.000000         1.000000       0.990000   \n",
       "50%    5.673150e+07      2.000000         1.000000       1.610000   \n",
       "75%    8.537404e+07      2.000000         2.000000       3.070000   \n",
       "max    1.134863e+08      2.000000         6.000000      33.960000   \n",
       "\n",
       "         RatecodeID  PULocationID  DOLocationID  payment_type   fare_amount  \\\n",
       "count  22685.000000  22685.000000  22685.000000  22685.000000  22685.000000   \n",
       "mean       1.043244    162.421732    161.544545      1.335552     13.041876   \n",
       "std        0.708122     66.632736     70.136002      0.493288     13.212569   \n",
       "min        1.000000      1.000000      1.000000      1.000000      0.000000   \n",
       "25%        1.000000    114.000000    112.000000      1.000000      6.500000   \n",
       "50%        1.000000    162.000000    162.000000      1.000000      9.500000   \n",
       "75%        1.000000    233.000000    233.000000      2.000000     14.500000   \n",
       "max       99.000000    265.000000    265.000000      4.000000    999.990000   \n",
       "\n",
       "              extra       mta_tax    tip_amount  tolls_amount  \\\n",
       "count  22685.000000  22685.000000  22685.000000  22685.000000   \n",
       "mean       0.333723      0.498038      1.836914      0.312734   \n",
       "std        0.462812      0.031257      2.801119      1.399622   \n",
       "min        0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000      0.500000      0.000000      0.000000   \n",
       "50%        0.000000      0.500000      1.350000      0.000000   \n",
       "75%        0.500000      0.500000      2.450000      0.000000   \n",
       "max        4.500000      0.500000    200.000000     19.100000   \n",
       "\n",
       "       improvement_surcharge  total_amount  \n",
       "count           22685.000000  22685.000000  \n",
       "mean                0.299921     16.328490  \n",
       "std                 0.004878     16.068902  \n",
       "min                 0.000000      0.000000  \n",
       "25%                 0.300000      8.750000  \n",
       "50%                 0.300000     11.800000  \n",
       "75%                 0.300000     17.800000  \n",
       "max                 0.300000   1200.290000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove unusual data\n",
    "df = df0[~mask]\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: Some things stand out from this table of summary statistics. For instance, there are clearly some outliers in several variables, like `tip_amount` (200) and `total_amount` (1,200). Also, a number of the variables, such as mta_tax, seem to be almost constant throughout the data, which would imply that they would not be expected to be very predictive."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "iXhaBfP_WOSR"
   },
   "source": [
    "### Task 2b. Convert pickup & dropoff columns to datetime\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "id": "TbHu-SSInJCX"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 22685 entries, 0 to 22698\n",
      "Data columns (total 2 columns):\n",
      " #   Column                 Non-Null Count  Dtype \n",
      "---  ------                 --------------  ----- \n",
      " 0   tpep_pickup_datetime   22685 non-null  object\n",
      " 1   tpep_dropoff_datetime  22685 non-null  object\n",
      "dtypes: object(2)\n",
      "memory usage: 531.7+ KB\n"
     ]
    }
   ],
   "source": [
    "# Check the format of the data\n",
    "df[[\"tpep_pickup_datetime\",\"tpep_dropoff_datetime\"]].info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "id": "h5L6OdYPqV0N"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 22685 entries, 0 to 22698\n",
      "Data columns (total 2 columns):\n",
      " #   Column                 Non-Null Count  Dtype         \n",
      "---  ------                 --------------  -----         \n",
      " 0   tpep_pickup_datetime   22685 non-null  datetime64[ns]\n",
      " 1   tpep_dropoff_datetime  22685 non-null  datetime64[ns]\n",
      "dtypes: datetime64[ns](2)\n",
      "memory usage: 531.7 KB\n"
     ]
    }
   ],
   "source": [
    "# Convert datetime columns to datetime\n",
    "df[\"tpep_pickup_datetime\"] = pd.to_datetime(df[\"tpep_pickup_datetime\"])\n",
    "df[\"tpep_dropoff_datetime\"] = pd.to_datetime(df[\"tpep_dropoff_datetime\"])\n",
    "df[[\"tpep_pickup_datetime\",\"tpep_dropoff_datetime\"]].info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "KlF7ZNSyW0yV"
   },
   "source": [
    "### Task 2c. Create duration column"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "w1v_Y1uunbsx"
   },
   "source": [
    "Create a new column called `duration` that represents the total number of minutes that each taxi ride took."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "id": "suC4LJFPMPCo"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>PULocationID</th>\n",
       "      <th>DOLocationID</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24870114</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-03-25 08:55:43</td>\n",
       "      <td>2017-03-25 09:09:47</td>\n",
       "      <td>6</td>\n",
       "      <td>3.34</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>100</td>\n",
       "      <td>231</td>\n",
       "      <td>1</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2.76</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>16.56</td>\n",
       "      <td>14.066667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35634249</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-04-11 14:53:28</td>\n",
       "      <td>2017-04-11 15:19:58</td>\n",
       "      <td>1</td>\n",
       "      <td>1.80</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>186</td>\n",
       "      <td>43</td>\n",
       "      <td>1</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>20.80</td>\n",
       "      <td>26.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>106203690</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-12-15 07:26:56</td>\n",
       "      <td>2017-12-15 07:34:08</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>262</td>\n",
       "      <td>236</td>\n",
       "      <td>1</td>\n",
       "      <td>6.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.45</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>8.75</td>\n",
       "      <td>7.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38942136</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-05-07 13:17:59</td>\n",
       "      <td>2017-05-07 13:48:14</td>\n",
       "      <td>1</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>188</td>\n",
       "      <td>97</td>\n",
       "      <td>1</td>\n",
       "      <td>20.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>6.39</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>27.69</td>\n",
       "      <td>30.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>30841670</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-04-15 23:32:20</td>\n",
       "      <td>2017-04-15 23:49:03</td>\n",
       "      <td>1</td>\n",
       "      <td>4.37</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>4</td>\n",
       "      <td>112</td>\n",
       "      <td>2</td>\n",
       "      <td>16.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>17.80</td>\n",
       "      <td>16.716667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  VendorID tpep_pickup_datetime tpep_dropoff_datetime  \\\n",
       "0    24870114         2  2017-03-25 08:55:43   2017-03-25 09:09:47   \n",
       "1    35634249         1  2017-04-11 14:53:28   2017-04-11 15:19:58   \n",
       "2   106203690         1  2017-12-15 07:26:56   2017-12-15 07:34:08   \n",
       "3    38942136         2  2017-05-07 13:17:59   2017-05-07 13:48:14   \n",
       "4    30841670         2  2017-04-15 23:32:20   2017-04-15 23:49:03   \n",
       "\n",
       "   passenger_count  trip_distance  RatecodeID store_and_fwd_flag  \\\n",
       "0                6           3.34           1                  N   \n",
       "1                1           1.80           1                  N   \n",
       "2                1           1.00           1                  N   \n",
       "3                1           3.70           1                  N   \n",
       "4                1           4.37           1                  N   \n",
       "\n",
       "   PULocationID  DOLocationID  payment_type  fare_amount  extra  mta_tax  \\\n",
       "0           100           231             1         13.0    0.0      0.5   \n",
       "1           186            43             1         16.0    0.0      0.5   \n",
       "2           262           236             1          6.5    0.0      0.5   \n",
       "3           188            97             1         20.5    0.0      0.5   \n",
       "4             4           112             2         16.5    0.5      0.5   \n",
       "\n",
       "   tip_amount  tolls_amount  improvement_surcharge  total_amount   duration  \n",
       "0        2.76           0.0                    0.3         16.56  14.066667  \n",
       "1        4.00           0.0                    0.3         20.80  26.500000  \n",
       "2        1.45           0.0                    0.3          8.75   7.200000  \n",
       "3        6.39           0.0                    0.3         27.69  30.250000  \n",
       "4        0.00           0.0                    0.3         17.80  16.716667  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create `duration` column\n",
    "df[\"duration\"] = (df[\"tpep_dropoff_datetime\"] - df[\"tpep_pickup_datetime\"]).dt.total_seconds() / 60\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Vtj4iAJMk9Vc"
   },
   "source": [
    "### Task 2d. Use Box plots to check outliers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7dcytBKhiGAr"
   },
   "source": [
    "Check outliers for each feature: `trip_distance`, `fare_amount`, `duration`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Create box plots\n",
    "df_long = pd.melt(df, value_vars=['trip_distance', 'fare_amount', 'duration'], var_name='Columns', value_name='Values')\n",
    "fig, ax = plt.subplots(3, 1, figsize=(12, 6))\n",
    "sns.boxplot(x='trip_distance', data=df, ax=ax[0])\n",
    "ax[0].set_title('Boxplot for Outlier detection')\n",
    "sns.boxplot(x='fare_amount', data=df, ax=ax[1])\n",
    "sns.boxplot(x='duration', data=df, ax=ax[2])\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "FetTHatPoR6n"
   },
   "source": [
    "Note: \n",
    "1. All three variables contain outliers. Some are extreme, but others not so much.\n",
    "2. It's 30 miles from the southern tip of Staten Island to the northern end of Manhattan and that's in a straight line. With this knowledge and the distribution of the values in this column, it's reasonable to leave these values alone and not alter them. However, the values for `fare_amount` and `duration` definitely seem to have problematic outliers on the higher end.\n",
    "3. There are trip distances of 0, let's investigate further to determine if these represent errors in the data or if they're extremely short trips that were rounded down to zero.\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 2e. Imputations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### `trip_distance` outliers\n",
    "\n",
    "Sort the column values, eliminate duplicates, and inspect the least 10 values. Check if they are rounded values or precise values?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = set(df[\"trip_distance\"])\n",
    "a_sort = sorted(a)\n",
    "a_sort[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: The distances are captured with a high degree of precision. However, it might be possible for trips to have distances of zero if a passenger summoned a taxi and then changed their mind. \n",
    "Next, check if there are enough zero values in the data to pose a problem?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0064800528983910075"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the count of rides where the trip_distance is zero.\n",
    "mask = df[\"trip_distance\"] == 0\n",
    "(df[mask].size)/(df.size)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: 0.0065 rides is relatively insignificant, but it's unlikely to have much of an effect on the model. Therefore, the trip_distance column will remain untouched with regard to outliers.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### `fare_amount` outliers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The range of values in the fare_amount column is large. The maximum fare amount in this dataset is nearly 1,000, which seems very unlikely. High values for this feature can be capped based on intuition and statistics. The interquartile range (IQR) is 8. The standard formula of Q3 + (1.5 * IQR) yields 26.50. That doesn't seem appropriate for the maximum fare cap. In this case, we'll use a factor of `6`, which results in a cap of 62.50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    22685.000000\n",
       "mean        13.041876\n",
       "std         13.212569\n",
       "min          0.000000\n",
       "25%          6.500000\n",
       "50%          9.500000\n",
       "75%         14.500000\n",
       "max        999.990000\n",
       "Name: fare_amount, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['fare_amount'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def outlier_imputer(column_list, iqr_factor):\n",
    "    '''\n",
    "    Impute upper-limit values in specified columns based on their interquartile range.\n",
    "\n",
    "    Arguments:\n",
    "        column_list: A list of columns to iterate over\n",
    "        iqr_factor: A number representing x in the formula:\n",
    "                    Q3 + (x * IQR). Used to determine maximum threshold,\n",
    "                    beyond which a point is considered an outlier.\n",
    "\n",
    "    The IQR is computed for each column in column_list and values exceeding\n",
    "    the upper threshold for each column are imputed with the upper threshold value.\n",
    "    '''\n",
    "    for col in column_list:\n",
    "        # Reassign minimum to zero\n",
    "        df.loc[df[col] < 0, col] = 0\n",
    "\n",
    "        # Calculate upper threshold\n",
    "        q1 = df[col].quantile(0.25)\n",
    "        q3 = df[col].quantile(0.75)\n",
    "        iqr = q3 - q1\n",
    "        upper_threshold = q3 + (iqr_factor * iqr)\n",
    "        print(col)\n",
    "        print('q3:', q3)\n",
    "        print('upper_threshold:', upper_threshold)\n",
    "\n",
    "        # Reassign values > threshold to threshold\n",
    "        df.loc[df[col] > upper_threshold, col] = upper_threshold\n",
    "        print(df[col].describe())\n",
    "        print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fare_amount\n",
      "q3: 14.5\n",
      "upper_threshold: 62.5\n",
      "count    22685.000000\n",
      "mean        12.905873\n",
      "std         10.539517\n",
      "min          0.000000\n",
      "25%          6.500000\n",
      "50%          9.500000\n",
      "75%         14.500000\n",
      "max         62.500000\n",
      "Name: fare_amount, dtype: float64\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Impute the maximum value as Q3 + (6 * IQR).\n",
    "outlier_imputer(['fare_amount'], 6) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### `duration` outliers\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "duration\n",
      "q3: 18.383333333333333\n",
      "upper_threshold: 88.68333333333331\n",
      "count    22685.000000\n",
      "mean        14.464108\n",
      "std         11.934861\n",
      "min          0.000000\n",
      "25%          6.666667\n",
      "50%         11.183333\n",
      "75%         18.383333\n",
      "max         88.683333\n",
      "Name: duration, dtype: float64\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Impute the maximum value as Q3 + (6 * IQR).\n",
    "outlier_imputer(['duration'], 6) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 3a. Feature engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Create `mean_distance` and `mean_duration` column\n",
    "\n",
    "When deployed, the model will not know the `distance` and `duration` of a trip until after the trip occurs, so we cannot train a model that uses this feature. Therefore, we can identify patterns and use those to estimate the duration of future trips. In essence, we're leveraging historical data to generalize about unseen scenarios.\n",
    "\n",
    "Create a column called `mean_distance` that captures the mean distance for each group of trips that share pickup and dropoff points.\n",
    "\n",
    "For example, if your data were:\n",
    "\n",
    "|Trip|Start|End|Distance|\n",
    "|--: |:---:|:-:|    |\n",
    "| 1  | A   | B | 1  |\n",
    "| 2  | C   | D | 2  |\n",
    "| 3  | A   | B |1.5 |\n",
    "| 4  | D   | C | 3  |\n",
    "\n",
    "The results should be:\n",
    "```\n",
    "A -> B: 1.25 miles\n",
    "C -> D: 2 miles\n",
    "D -> C: 3 miles\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create `pickup_dropoff` column\n",
    "df[\"pickup_dropoff\"]=df[\"PULocationID\"].apply(str) + \" - \" + df[\"DOLocationID\"].apply(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>PULocationID</th>\n",
       "      <th>DOLocationID</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "      <th>duration</th>\n",
       "      <th>pickup_dropoff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24870114</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-03-25 08:55:43</td>\n",
       "      <td>2017-03-25 09:09:47</td>\n",
       "      <td>6</td>\n",
       "      <td>3.34</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>100</td>\n",
       "      <td>231</td>\n",
       "      <td>1</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2.76</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>16.56</td>\n",
       "      <td>14.066667</td>\n",
       "      <td>100 - 231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35634249</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-04-11 14:53:28</td>\n",
       "      <td>2017-04-11 15:19:58</td>\n",
       "      <td>1</td>\n",
       "      <td>1.80</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>186</td>\n",
       "      <td>43</td>\n",
       "      <td>1</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>20.80</td>\n",
       "      <td>26.500000</td>\n",
       "      <td>186 - 43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>106203690</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-12-15 07:26:56</td>\n",
       "      <td>2017-12-15 07:34:08</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>262</td>\n",
       "      <td>236</td>\n",
       "      <td>1</td>\n",
       "      <td>6.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.45</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>8.75</td>\n",
       "      <td>7.200000</td>\n",
       "      <td>262 - 236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38942136</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-05-07 13:17:59</td>\n",
       "      <td>2017-05-07 13:48:14</td>\n",
       "      <td>1</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>188</td>\n",
       "      <td>97</td>\n",
       "      <td>1</td>\n",
       "      <td>20.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>6.39</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>27.69</td>\n",
       "      <td>30.250000</td>\n",
       "      <td>188 - 97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>30841670</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-04-15 23:32:20</td>\n",
       "      <td>2017-04-15 23:49:03</td>\n",
       "      <td>1</td>\n",
       "      <td>4.37</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>4</td>\n",
       "      <td>112</td>\n",
       "      <td>2</td>\n",
       "      <td>16.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>17.80</td>\n",
       "      <td>16.716667</td>\n",
       "      <td>4 - 112</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  VendorID tpep_pickup_datetime tpep_dropoff_datetime  \\\n",
       "0    24870114         2  2017-03-25 08:55:43   2017-03-25 09:09:47   \n",
       "1    35634249         1  2017-04-11 14:53:28   2017-04-11 15:19:58   \n",
       "2   106203690         1  2017-12-15 07:26:56   2017-12-15 07:34:08   \n",
       "3    38942136         2  2017-05-07 13:17:59   2017-05-07 13:48:14   \n",
       "4    30841670         2  2017-04-15 23:32:20   2017-04-15 23:49:03   \n",
       "\n",
       "   passenger_count  trip_distance  RatecodeID store_and_fwd_flag  \\\n",
       "0                6           3.34           1                  N   \n",
       "1                1           1.80           1                  N   \n",
       "2                1           1.00           1                  N   \n",
       "3                1           3.70           1                  N   \n",
       "4                1           4.37           1                  N   \n",
       "\n",
       "   PULocationID  DOLocationID  payment_type  fare_amount  extra  mta_tax  \\\n",
       "0           100           231             1         13.0    0.0      0.5   \n",
       "1           186            43             1         16.0    0.0      0.5   \n",
       "2           262           236             1          6.5    0.0      0.5   \n",
       "3           188            97             1         20.5    0.0      0.5   \n",
       "4             4           112             2         16.5    0.5      0.5   \n",
       "\n",
       "   tip_amount  tolls_amount  improvement_surcharge  total_amount   duration  \\\n",
       "0        2.76           0.0                    0.3         16.56  14.066667   \n",
       "1        4.00           0.0                    0.3         20.80  26.500000   \n",
       "2        1.45           0.0                    0.3          8.75   7.200000   \n",
       "3        6.39           0.0                    0.3         27.69  30.250000   \n",
       "4        0.00           0.0                    0.3         17.80  16.716667   \n",
       "\n",
       "  pickup_dropoff  \n",
       "0      100 - 231  \n",
       "1       186 - 43  \n",
       "2      262 - 236  \n",
       "3       188 - 97  \n",
       "4        4 - 112  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pickup_dropoff</th>\n",
       "      <th>mean_trip_distance</th>\n",
       "      <th>mean_duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1 - 1</td>\n",
       "      <td>2.433333</td>\n",
       "      <td>0.466667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10 - 148</td>\n",
       "      <td>15.700000</td>\n",
       "      <td>69.366667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100 - 1</td>\n",
       "      <td>16.890000</td>\n",
       "      <td>48.183333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>100 - 100</td>\n",
       "      <td>0.253333</td>\n",
       "      <td>3.130556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>100 - 107</td>\n",
       "      <td>1.180000</td>\n",
       "      <td>11.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4166</th>\n",
       "      <td>97 - 65</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>4.483333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4167</th>\n",
       "      <td>97 - 66</td>\n",
       "      <td>1.400000</td>\n",
       "      <td>11.233333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4168</th>\n",
       "      <td>97 - 80</td>\n",
       "      <td>3.840000</td>\n",
       "      <td>23.833333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4169</th>\n",
       "      <td>97 - 90</td>\n",
       "      <td>4.420000</td>\n",
       "      <td>11.766667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4170</th>\n",
       "      <td>97 - 97</td>\n",
       "      <td>1.006667</td>\n",
       "      <td>5.794444</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4171 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     pickup_dropoff  mean_trip_distance  mean_duration\n",
       "0             1 - 1            2.433333       0.466667\n",
       "1          10 - 148           15.700000      69.366667\n",
       "2           100 - 1           16.890000      48.183333\n",
       "3         100 - 100            0.253333       3.130556\n",
       "4         100 - 107            1.180000      11.200000\n",
       "...             ...                 ...            ...\n",
       "4166        97 - 65            0.500000       4.483333\n",
       "4167        97 - 66            1.400000      11.233333\n",
       "4168        97 - 80            3.840000      23.833333\n",
       "4169        97 - 90            4.420000      11.766667\n",
       "4170        97 - 97            1.006667       5.794444\n",
       "\n",
       "[4171 rows x 3 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Caculate the mean duration and mean distance for each group of trips \n",
    "grouped_distiance_duration = df[[\"pickup_dropoff\", \"trip_distance\",\"duration\"]].groupby(\"pickup_dropoff\").mean().reset_index()\n",
    "grouped_distiance_duration.rename(columns={'trip_distance': 'mean_trip_distance', 'duration': 'mean_duration'}, inplace=True)\n",
    "grouped_distiance_duration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>PULocationID</th>\n",
       "      <th>DOLocationID</th>\n",
       "      <th>...</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "      <th>duration</th>\n",
       "      <th>pickup_dropoff</th>\n",
       "      <th>mean_trip_distance</th>\n",
       "      <th>mean_duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24870114</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-03-25 08:55:43</td>\n",
       "      <td>2017-03-25 09:09:47</td>\n",
       "      <td>6</td>\n",
       "      <td>3.34</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>100</td>\n",
       "      <td>231</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2.76</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>16.56</td>\n",
       "      <td>14.066667</td>\n",
       "      <td>100 - 231</td>\n",
       "      <td>3.521667</td>\n",
       "      <td>22.847222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35634249</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-04-11 14:53:28</td>\n",
       "      <td>2017-04-11 15:19:58</td>\n",
       "      <td>1</td>\n",
       "      <td>1.80</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>186</td>\n",
       "      <td>43</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>4.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>20.80</td>\n",
       "      <td>26.500000</td>\n",
       "      <td>186 - 43</td>\n",
       "      <td>3.108889</td>\n",
       "      <td>24.470370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>106203690</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-12-15 07:26:56</td>\n",
       "      <td>2017-12-15 07:34:08</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>262</td>\n",
       "      <td>236</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.45</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>8.75</td>\n",
       "      <td>7.200000</td>\n",
       "      <td>262 - 236</td>\n",
       "      <td>0.881429</td>\n",
       "      <td>7.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38942136</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-05-07 13:17:59</td>\n",
       "      <td>2017-05-07 13:48:14</td>\n",
       "      <td>1</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>188</td>\n",
       "      <td>97</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>6.39</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>27.69</td>\n",
       "      <td>30.250000</td>\n",
       "      <td>188 - 97</td>\n",
       "      <td>3.700000</td>\n",
       "      <td>30.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>30841670</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-04-15 23:32:20</td>\n",
       "      <td>2017-04-15 23:49:03</td>\n",
       "      <td>1</td>\n",
       "      <td>4.37</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>4</td>\n",
       "      <td>112</td>\n",
       "      <td>...</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>17.80</td>\n",
       "      <td>16.716667</td>\n",
       "      <td>4 - 112</td>\n",
       "      <td>4.435000</td>\n",
       "      <td>14.616667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  VendorID tpep_pickup_datetime tpep_dropoff_datetime  \\\n",
       "0    24870114         2  2017-03-25 08:55:43   2017-03-25 09:09:47   \n",
       "1    35634249         1  2017-04-11 14:53:28   2017-04-11 15:19:58   \n",
       "2   106203690         1  2017-12-15 07:26:56   2017-12-15 07:34:08   \n",
       "3    38942136         2  2017-05-07 13:17:59   2017-05-07 13:48:14   \n",
       "4    30841670         2  2017-04-15 23:32:20   2017-04-15 23:49:03   \n",
       "\n",
       "   passenger_count  trip_distance  RatecodeID store_and_fwd_flag  \\\n",
       "0                6           3.34           1                  N   \n",
       "1                1           1.80           1                  N   \n",
       "2                1           1.00           1                  N   \n",
       "3                1           3.70           1                  N   \n",
       "4                1           4.37           1                  N   \n",
       "\n",
       "   PULocationID  DOLocationID  ...  extra  mta_tax  tip_amount  tolls_amount  \\\n",
       "0           100           231  ...    0.0      0.5        2.76           0.0   \n",
       "1           186            43  ...    0.0      0.5        4.00           0.0   \n",
       "2           262           236  ...    0.0      0.5        1.45           0.0   \n",
       "3           188            97  ...    0.0      0.5        6.39           0.0   \n",
       "4             4           112  ...    0.5      0.5        0.00           0.0   \n",
       "\n",
       "   improvement_surcharge  total_amount   duration  pickup_dropoff  \\\n",
       "0                    0.3         16.56  14.066667       100 - 231   \n",
       "1                    0.3         20.80  26.500000        186 - 43   \n",
       "2                    0.3          8.75   7.200000       262 - 236   \n",
       "3                    0.3         27.69  30.250000        188 - 97   \n",
       "4                    0.3         17.80  16.716667         4 - 112   \n",
       "\n",
       "   mean_trip_distance mean_duration  \n",
       "0            3.521667     22.847222  \n",
       "1            3.108889     24.470370  \n",
       "2            0.881429      7.250000  \n",
       "3            3.700000     30.250000  \n",
       "4            4.435000     14.616667  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Merge data\n",
    "df = pd.merge(df, grouped_distiance_duration, on='pickup_dropoff', how='left')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Create `day` and `month` columns\n",
    "\n",
    "Create two new columns, `day` (name of day) and `month` (name of month) by extracting the relevant information from the `tpep_pickup_datetime` column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create 'day' col\n",
    "df[\"day\"] = df[\"tpep_pickup_datetime\"].dt.day_name()\n",
    "# Create 'month' col\n",
    "df[\"month\"] = df[\"tpep_pickup_datetime\"].dt.month_name()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Create `rush_hour` column\n",
    "\n",
    "Define rush hour as:\n",
    "* Any weekday (not Saturday or Sunday) AND\n",
    "* Either from 06:00&ndash;10:00 or from 16:00&ndash;20:00\n",
    "\n",
    "Create a binary `rush_hour` column that contains a 1 if the ride was during rush hour and a 0 if it was not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>PULocationID</th>\n",
       "      <th>DOLocationID</th>\n",
       "      <th>...</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "      <th>duration</th>\n",
       "      <th>pickup_dropoff</th>\n",
       "      <th>mean_trip_distance</th>\n",
       "      <th>mean_duration</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>rush_hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24870114</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-03-25 08:55:43</td>\n",
       "      <td>2017-03-25 09:09:47</td>\n",
       "      <td>6</td>\n",
       "      <td>3.34</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>100</td>\n",
       "      <td>231</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>16.56</td>\n",
       "      <td>14.066667</td>\n",
       "      <td>100 - 231</td>\n",
       "      <td>3.521667</td>\n",
       "      <td>22.847222</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>March</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35634249</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-04-11 14:53:28</td>\n",
       "      <td>2017-04-11 15:19:58</td>\n",
       "      <td>1</td>\n",
       "      <td>1.80</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>186</td>\n",
       "      <td>43</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>20.80</td>\n",
       "      <td>26.500000</td>\n",
       "      <td>186 - 43</td>\n",
       "      <td>3.108889</td>\n",
       "      <td>24.470370</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>April</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>106203690</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-12-15 07:26:56</td>\n",
       "      <td>2017-12-15 07:34:08</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>262</td>\n",
       "      <td>236</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>8.75</td>\n",
       "      <td>7.200000</td>\n",
       "      <td>262 - 236</td>\n",
       "      <td>0.881429</td>\n",
       "      <td>7.250000</td>\n",
       "      <td>Friday</td>\n",
       "      <td>December</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38942136</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-05-07 13:17:59</td>\n",
       "      <td>2017-05-07 13:48:14</td>\n",
       "      <td>1</td>\n",
       "      <td>3.70</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>188</td>\n",
       "      <td>97</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>27.69</td>\n",
       "      <td>30.250000</td>\n",
       "      <td>188 - 97</td>\n",
       "      <td>3.700000</td>\n",
       "      <td>30.250000</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>May</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>30841670</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-04-15 23:32:20</td>\n",
       "      <td>2017-04-15 23:49:03</td>\n",
       "      <td>1</td>\n",
       "      <td>4.37</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>4</td>\n",
       "      <td>112</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3</td>\n",
       "      <td>17.80</td>\n",
       "      <td>16.716667</td>\n",
       "      <td>4 - 112</td>\n",
       "      <td>4.435000</td>\n",
       "      <td>14.616667</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>April</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  VendorID tpep_pickup_datetime tpep_dropoff_datetime  \\\n",
       "0    24870114         2  2017-03-25 08:55:43   2017-03-25 09:09:47   \n",
       "1    35634249         1  2017-04-11 14:53:28   2017-04-11 15:19:58   \n",
       "2   106203690         1  2017-12-15 07:26:56   2017-12-15 07:34:08   \n",
       "3    38942136         2  2017-05-07 13:17:59   2017-05-07 13:48:14   \n",
       "4    30841670         2  2017-04-15 23:32:20   2017-04-15 23:49:03   \n",
       "\n",
       "   passenger_count  trip_distance  RatecodeID store_and_fwd_flag  \\\n",
       "0                6           3.34           1                  N   \n",
       "1                1           1.80           1                  N   \n",
       "2                1           1.00           1                  N   \n",
       "3                1           3.70           1                  N   \n",
       "4                1           4.37           1                  N   \n",
       "\n",
       "   PULocationID  DOLocationID  ...  tolls_amount  improvement_surcharge  \\\n",
       "0           100           231  ...           0.0                    0.3   \n",
       "1           186            43  ...           0.0                    0.3   \n",
       "2           262           236  ...           0.0                    0.3   \n",
       "3           188            97  ...           0.0                    0.3   \n",
       "4             4           112  ...           0.0                    0.3   \n",
       "\n",
       "   total_amount   duration  pickup_dropoff  mean_trip_distance  mean_duration  \\\n",
       "0         16.56  14.066667       100 - 231            3.521667      22.847222   \n",
       "1         20.80  26.500000        186 - 43            3.108889      24.470370   \n",
       "2          8.75   7.200000       262 - 236            0.881429       7.250000   \n",
       "3         27.69  30.250000        188 - 97            3.700000      30.250000   \n",
       "4         17.80  16.716667         4 - 112            4.435000      14.616667   \n",
       "\n",
       "        day     month rush_hour  \n",
       "0  Saturday     March         0  \n",
       "1   Tuesday     April         0  \n",
       "2    Friday  December         1  \n",
       "3    Sunday       May         0  \n",
       "4  Saturday     April         0  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def is_weekday_and_time_range(dt):\n",
    "  \"\"\"\n",
    "  Checks if the datetime object falls on a weekday (not Saturday or Sunday)\n",
    "  and within the time ranges 06:00-10:00 or 16:00-20:00.\n",
    "\n",
    "  Args:\n",
    "      dt (pd.Timestamp): The datetime object to check.\n",
    "\n",
    "  Returns:\n",
    "      int: 1 if conditions are met, 0 otherwise.\n",
    "  \"\"\"\n",
    "  # Check weekday (Monday = 0, Sunday = 6)\n",
    "  if dt.weekday() in [0, 1, 2, 3, 4]:\n",
    "    # Check time range\n",
    "    if (dt.hour >= 6 and dt.hour < 10) or (dt.hour >= 16 and dt.hour < 20):\n",
    "      return 1\n",
    "  return 0\n",
    "\n",
    "# Create a new column with 0 or 1 based on conditions\n",
    "df['rush_hour'] = df['tpep_pickup_datetime'].apply(is_weekday_and_time_range)\n",
    "\n",
    "# Print the modified DataFrame\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 4. Scatter plot\n",
    "\n",
    "Create a scatterplot to visualize the relationship between `mean_duration` and `fare_amount`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a scatterplot to visualize the relationship between variables of interest\n",
    "f = plt.figure()\n",
    "f.set_figwidth(5)\n",
    "f.set_figheight(5)\n",
    "sns.scatterplot(x='mean_duration', y='fare_amount', data=df)\n",
    "plt.ylim(0, 70)\n",
    "plt.xlim(0, 70)\n",
    "plt.xlabel(\"mean_duration\")\n",
    "plt.ylabel(\"fare_amount\")\n",
    "plt.title(\"Scatter Plot\")\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: There are two horizontal lines aorune fare amounts of 50 ~ 65, we know that the one of lines represents 62.5 which we imputed for outliers. Next, check the value of the rides in the second horizontal line in the scatter plot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "52.0    514\n",
       "62.5     84\n",
       "50.5      9\n",
       "59.0      9\n",
       "57.5      8\n",
       "Name: fare_amount, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Count for each group of fare amount \n",
    "mask = df[\"fare_amount\"] >= 50\n",
    "df[\"fare_amount\"][mask].value_counts().head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>VendorID</th>\n",
       "      <th>tpep_pickup_datetime</th>\n",
       "      <th>tpep_dropoff_datetime</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>trip_distance</th>\n",
       "      <th>RatecodeID</th>\n",
       "      <th>store_and_fwd_flag</th>\n",
       "      <th>PULocationID</th>\n",
       "      <th>DOLocationID</th>\n",
       "      <th>payment_type</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>extra</th>\n",
       "      <th>mta_tax</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>tolls_amount</th>\n",
       "      <th>improvement_surcharge</th>\n",
       "      <th>total_amount</th>\n",
       "      <th>duration</th>\n",
       "      <th>pickup_dropoff</th>\n",
       "      <th>mean_trip_distance</th>\n",
       "      <th>mean_duration</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>rush_hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>18600059</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-03-05 19:15:30</td>\n",
       "      <td>2017-03-05 19:52:18</td>\n",
       "      <td>2</td>\n",
       "      <td>18.90</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>236</td>\n",
       "      <td>132</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>14.58</td>\n",
       "      <td>5.54</td>\n",
       "      <td>0.3</td>\n",
       "      <td>72.92</td>\n",
       "      <td>36.800000</td>\n",
       "      <td>236 - 132</td>\n",
       "      <td>19.211667</td>\n",
       "      <td>40.483333</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>March</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>47959795</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-06-03 14:24:57</td>\n",
       "      <td>2017-06-03 15:31:48</td>\n",
       "      <td>1</td>\n",
       "      <td>18.00</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>163</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>52.80</td>\n",
       "      <td>66.850000</td>\n",
       "      <td>132 - 163</td>\n",
       "      <td>19.229000</td>\n",
       "      <td>52.941667</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>June</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>95729204</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-11-11 20:16:16</td>\n",
       "      <td>2017-11-11 20:17:14</td>\n",
       "      <td>1</td>\n",
       "      <td>0.23</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>132</td>\n",
       "      <td>2</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>52.80</td>\n",
       "      <td>0.966667</td>\n",
       "      <td>132 - 132</td>\n",
       "      <td>2.255862</td>\n",
       "      <td>3.021839</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>November</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>247</th>\n",
       "      <td>103404868</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-12-06 23:37:08</td>\n",
       "      <td>2017-12-07 00:06:19</td>\n",
       "      <td>1</td>\n",
       "      <td>18.93</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>79</td>\n",
       "      <td>2</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>52.80</td>\n",
       "      <td>29.183333</td>\n",
       "      <td>132 - 79</td>\n",
       "      <td>19.431667</td>\n",
       "      <td>47.275000</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>December</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>378</th>\n",
       "      <td>80479432</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-09-24 23:45:45</td>\n",
       "      <td>2017-09-25 00:15:14</td>\n",
       "      <td>1</td>\n",
       "      <td>17.99</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>234</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>14.64</td>\n",
       "      <td>5.76</td>\n",
       "      <td>0.3</td>\n",
       "      <td>73.20</td>\n",
       "      <td>29.483333</td>\n",
       "      <td>132 - 234</td>\n",
       "      <td>17.654000</td>\n",
       "      <td>49.833333</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>September</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>387</th>\n",
       "      <td>16226157</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-02-28 18:30:05</td>\n",
       "      <td>2017-02-28 19:09:55</td>\n",
       "      <td>1</td>\n",
       "      <td>18.40</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>48</td>\n",
       "      <td>2</td>\n",
       "      <td>52.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.54</td>\n",
       "      <td>0.3</td>\n",
       "      <td>62.84</td>\n",
       "      <td>39.833333</td>\n",
       "      <td>132 - 48</td>\n",
       "      <td>18.761905</td>\n",
       "      <td>58.241270</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>February</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>405</th>\n",
       "      <td>55253442</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-06-05 12:51:58</td>\n",
       "      <td>2017-06-05 13:07:35</td>\n",
       "      <td>1</td>\n",
       "      <td>4.73</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>228</td>\n",
       "      <td>88</td>\n",
       "      <td>2</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.76</td>\n",
       "      <td>0.3</td>\n",
       "      <td>58.56</td>\n",
       "      <td>15.616667</td>\n",
       "      <td>228 - 88</td>\n",
       "      <td>4.730000</td>\n",
       "      <td>15.616667</td>\n",
       "      <td>Monday</td>\n",
       "      <td>June</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>448</th>\n",
       "      <td>65900029</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-08-03 22:47:14</td>\n",
       "      <td>2017-08-03 23:32:41</td>\n",
       "      <td>2</td>\n",
       "      <td>18.21</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>48</td>\n",
       "      <td>2</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.76</td>\n",
       "      <td>0.3</td>\n",
       "      <td>58.56</td>\n",
       "      <td>45.450000</td>\n",
       "      <td>132 - 48</td>\n",
       "      <td>18.761905</td>\n",
       "      <td>58.241270</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>August</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>467</th>\n",
       "      <td>80904240</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-09-26 13:48:26</td>\n",
       "      <td>2017-09-26 14:31:17</td>\n",
       "      <td>1</td>\n",
       "      <td>17.27</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>186</td>\n",
       "      <td>132</td>\n",
       "      <td>2</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.76</td>\n",
       "      <td>0.3</td>\n",
       "      <td>58.56</td>\n",
       "      <td>42.850000</td>\n",
       "      <td>186 - 132</td>\n",
       "      <td>17.096000</td>\n",
       "      <td>42.920000</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>September</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>519</th>\n",
       "      <td>33706214</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-04-23 21:34:48</td>\n",
       "      <td>2017-04-23 22:46:23</td>\n",
       "      <td>6</td>\n",
       "      <td>18.34</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>148</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>5.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>57.80</td>\n",
       "      <td>71.583333</td>\n",
       "      <td>132 - 148</td>\n",
       "      <td>17.994286</td>\n",
       "      <td>46.340476</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>April</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>568</th>\n",
       "      <td>99259872</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-11-22 21:31:32</td>\n",
       "      <td>2017-11-22 22:00:25</td>\n",
       "      <td>1</td>\n",
       "      <td>18.65</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>144</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>10.56</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>63.36</td>\n",
       "      <td>28.883333</td>\n",
       "      <td>132 - 144</td>\n",
       "      <td>18.537500</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>November</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>571</th>\n",
       "      <td>61050418</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-07-18 13:29:06</td>\n",
       "      <td>2017-07-18 13:29:19</td>\n",
       "      <td>1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>230</td>\n",
       "      <td>161</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>11.71</td>\n",
       "      <td>5.76</td>\n",
       "      <td>0.3</td>\n",
       "      <td>70.27</td>\n",
       "      <td>0.216667</td>\n",
       "      <td>230 - 161</td>\n",
       "      <td>0.685484</td>\n",
       "      <td>7.965591</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>July</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>585</th>\n",
       "      <td>54444647</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-06-26 13:39:12</td>\n",
       "      <td>2017-06-26 14:34:54</td>\n",
       "      <td>1</td>\n",
       "      <td>17.76</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>211</td>\n",
       "      <td>132</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>11.71</td>\n",
       "      <td>5.76</td>\n",
       "      <td>0.3</td>\n",
       "      <td>70.27</td>\n",
       "      <td>55.700000</td>\n",
       "      <td>211 - 132</td>\n",
       "      <td>16.580000</td>\n",
       "      <td>61.691667</td>\n",
       "      <td>Monday</td>\n",
       "      <td>June</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>691</th>\n",
       "      <td>94424289</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-11-07 22:15:00</td>\n",
       "      <td>2017-11-07 22:45:32</td>\n",
       "      <td>2</td>\n",
       "      <td>16.97</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>170</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>11.71</td>\n",
       "      <td>5.76</td>\n",
       "      <td>0.3</td>\n",
       "      <td>70.27</td>\n",
       "      <td>30.533333</td>\n",
       "      <td>132 - 170</td>\n",
       "      <td>17.203000</td>\n",
       "      <td>37.113333</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>November</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>716</th>\n",
       "      <td>103094220</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-12-06 05:19:50</td>\n",
       "      <td>2017-12-06 05:53:52</td>\n",
       "      <td>1</td>\n",
       "      <td>20.80</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>239</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>5.85</td>\n",
       "      <td>5.76</td>\n",
       "      <td>0.3</td>\n",
       "      <td>64.41</td>\n",
       "      <td>34.033333</td>\n",
       "      <td>132 - 239</td>\n",
       "      <td>20.901250</td>\n",
       "      <td>44.862500</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>December</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>718</th>\n",
       "      <td>66115834</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-08-04 17:53:34</td>\n",
       "      <td>2017-08-04 18:50:56</td>\n",
       "      <td>1</td>\n",
       "      <td>21.60</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>264</td>\n",
       "      <td>264</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>12.60</td>\n",
       "      <td>5.76</td>\n",
       "      <td>0.3</td>\n",
       "      <td>75.66</td>\n",
       "      <td>57.366667</td>\n",
       "      <td>264 - 264</td>\n",
       "      <td>3.191516</td>\n",
       "      <td>15.617690</td>\n",
       "      <td>Friday</td>\n",
       "      <td>August</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>781</th>\n",
       "      <td>55934137</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-06-09 09:31:25</td>\n",
       "      <td>2017-06-09 10:24:10</td>\n",
       "      <td>2</td>\n",
       "      <td>18.81</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>163</td>\n",
       "      <td>132</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>13.20</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>66.00</td>\n",
       "      <td>52.750000</td>\n",
       "      <td>163 - 132</td>\n",
       "      <td>17.275833</td>\n",
       "      <td>52.330556</td>\n",
       "      <td>Friday</td>\n",
       "      <td>June</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>815</th>\n",
       "      <td>13731926</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-02-21 06:11:03</td>\n",
       "      <td>2017-02-21 06:59:39</td>\n",
       "      <td>5</td>\n",
       "      <td>16.94</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>170</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2.00</td>\n",
       "      <td>5.54</td>\n",
       "      <td>0.3</td>\n",
       "      <td>60.34</td>\n",
       "      <td>48.600000</td>\n",
       "      <td>132 - 170</td>\n",
       "      <td>17.203000</td>\n",
       "      <td>37.113333</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>February</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>817</th>\n",
       "      <td>52277743</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-06-20 08:15:18</td>\n",
       "      <td>2017-06-20 10:24:37</td>\n",
       "      <td>1</td>\n",
       "      <td>17.77</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>246</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>11.71</td>\n",
       "      <td>5.76</td>\n",
       "      <td>0.3</td>\n",
       "      <td>70.27</td>\n",
       "      <td>88.683333</td>\n",
       "      <td>132 - 246</td>\n",
       "      <td>18.515000</td>\n",
       "      <td>66.266667</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>June</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>834</th>\n",
       "      <td>2684305</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-01-10 22:29:47</td>\n",
       "      <td>2017-01-10 23:06:46</td>\n",
       "      <td>1</td>\n",
       "      <td>18.57</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>48</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>13.20</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>66.00</td>\n",
       "      <td>36.983333</td>\n",
       "      <td>132 - 48</td>\n",
       "      <td>18.761905</td>\n",
       "      <td>58.241270</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>January</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>839</th>\n",
       "      <td>90860814</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-10-27 21:50:00</td>\n",
       "      <td>2017-10-27 22:35:04</td>\n",
       "      <td>1</td>\n",
       "      <td>22.43</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>163</td>\n",
       "      <td>2</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.76</td>\n",
       "      <td>0.3</td>\n",
       "      <td>58.56</td>\n",
       "      <td>45.066667</td>\n",
       "      <td>132 - 163</td>\n",
       "      <td>19.229000</td>\n",
       "      <td>52.941667</td>\n",
       "      <td>Friday</td>\n",
       "      <td>October</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>860</th>\n",
       "      <td>106575186</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-12-16 06:39:59</td>\n",
       "      <td>2017-12-16 07:07:59</td>\n",
       "      <td>2</td>\n",
       "      <td>17.80</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>75</td>\n",
       "      <td>132</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>6.00</td>\n",
       "      <td>5.76</td>\n",
       "      <td>0.3</td>\n",
       "      <td>64.56</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>75 - 132</td>\n",
       "      <td>18.442500</td>\n",
       "      <td>36.204167</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>December</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>880</th>\n",
       "      <td>110495611</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-12-30 05:25:29</td>\n",
       "      <td>2017-12-30 06:01:29</td>\n",
       "      <td>6</td>\n",
       "      <td>18.23</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>68</td>\n",
       "      <td>132</td>\n",
       "      <td>2</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>52.80</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>68 - 132</td>\n",
       "      <td>18.785000</td>\n",
       "      <td>58.016667</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>December</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>957</th>\n",
       "      <td>87017503</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-10-15 22:39:12</td>\n",
       "      <td>2017-10-15 23:14:22</td>\n",
       "      <td>1</td>\n",
       "      <td>21.80</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>261</td>\n",
       "      <td>2</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>52.80</td>\n",
       "      <td>35.166667</td>\n",
       "      <td>132 - 261</td>\n",
       "      <td>22.115000</td>\n",
       "      <td>51.493750</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>October</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>969</th>\n",
       "      <td>12762608</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-02-17 20:39:42</td>\n",
       "      <td>2017-02-17 21:13:29</td>\n",
       "      <td>1</td>\n",
       "      <td>19.57</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>140</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>11.67</td>\n",
       "      <td>5.54</td>\n",
       "      <td>0.3</td>\n",
       "      <td>70.01</td>\n",
       "      <td>33.783333</td>\n",
       "      <td>132 - 140</td>\n",
       "      <td>19.293333</td>\n",
       "      <td>36.791667</td>\n",
       "      <td>Friday</td>\n",
       "      <td>February</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>71264442</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-08-23 18:23:26</td>\n",
       "      <td>2017-08-23 19:18:29</td>\n",
       "      <td>1</td>\n",
       "      <td>16.70</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>132</td>\n",
       "      <td>230</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>42.29</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>99.59</td>\n",
       "      <td>55.050000</td>\n",
       "      <td>132 - 230</td>\n",
       "      <td>18.571200</td>\n",
       "      <td>59.590000</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>August</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1081</th>\n",
       "      <td>11006300</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-02-07 17:20:19</td>\n",
       "      <td>2017-02-07 17:34:41</td>\n",
       "      <td>1</td>\n",
       "      <td>1.09</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>170</td>\n",
       "      <td>48</td>\n",
       "      <td>2</td>\n",
       "      <td>52.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>5.54</td>\n",
       "      <td>0.3</td>\n",
       "      <td>62.84</td>\n",
       "      <td>14.366667</td>\n",
       "      <td>170 - 48</td>\n",
       "      <td>1.265789</td>\n",
       "      <td>14.135965</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>February</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1096</th>\n",
       "      <td>68882036</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-08-14 23:01:15</td>\n",
       "      <td>2017-08-14 23:03:35</td>\n",
       "      <td>5</td>\n",
       "      <td>2.12</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>265</td>\n",
       "      <td>265</td>\n",
       "      <td>2</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>52.80</td>\n",
       "      <td>2.333333</td>\n",
       "      <td>265 - 265</td>\n",
       "      <td>0.753077</td>\n",
       "      <td>3.411538</td>\n",
       "      <td>Monday</td>\n",
       "      <td>August</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1109</th>\n",
       "      <td>74720333</td>\n",
       "      <td>1</td>\n",
       "      <td>2017-09-06 10:46:17</td>\n",
       "      <td>2017-09-06 11:44:41</td>\n",
       "      <td>1</td>\n",
       "      <td>19.10</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>239</td>\n",
       "      <td>132</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>15.80</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>68.60</td>\n",
       "      <td>58.400000</td>\n",
       "      <td>239 - 132</td>\n",
       "      <td>19.795000</td>\n",
       "      <td>50.562500</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>September</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1178</th>\n",
       "      <td>51937907</td>\n",
       "      <td>2</td>\n",
       "      <td>2017-06-19 06:23:13</td>\n",
       "      <td>2017-06-19 07:03:53</td>\n",
       "      <td>6</td>\n",
       "      <td>19.77</td>\n",
       "      <td>2</td>\n",
       "      <td>N</td>\n",
       "      <td>238</td>\n",
       "      <td>132</td>\n",
       "      <td>1</td>\n",
       "      <td>52.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>17.57</td>\n",
       "      <td>5.76</td>\n",
       "      <td>0.3</td>\n",
       "      <td>76.13</td>\n",
       "      <td>40.666667</td>\n",
       "      <td>238 - 132</td>\n",
       "      <td>19.470000</td>\n",
       "      <td>53.861111</td>\n",
       "      <td>Monday</td>\n",
       "      <td>June</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Unnamed: 0  VendorID tpep_pickup_datetime tpep_dropoff_datetime  \\\n",
       "11      18600059         2  2017-03-05 19:15:30   2017-03-05 19:52:18   \n",
       "110     47959795         1  2017-06-03 14:24:57   2017-06-03 15:31:48   \n",
       "161     95729204         2  2017-11-11 20:16:16   2017-11-11 20:17:14   \n",
       "247    103404868         2  2017-12-06 23:37:08   2017-12-07 00:06:19   \n",
       "378     80479432         2  2017-09-24 23:45:45   2017-09-25 00:15:14   \n",
       "387     16226157         1  2017-02-28 18:30:05   2017-02-28 19:09:55   \n",
       "405     55253442         2  2017-06-05 12:51:58   2017-06-05 13:07:35   \n",
       "448     65900029         2  2017-08-03 22:47:14   2017-08-03 23:32:41   \n",
       "467     80904240         2  2017-09-26 13:48:26   2017-09-26 14:31:17   \n",
       "519     33706214         2  2017-04-23 21:34:48   2017-04-23 22:46:23   \n",
       "568     99259872         2  2017-11-22 21:31:32   2017-11-22 22:00:25   \n",
       "571     61050418         2  2017-07-18 13:29:06   2017-07-18 13:29:19   \n",
       "585     54444647         2  2017-06-26 13:39:12   2017-06-26 14:34:54   \n",
       "691     94424289         2  2017-11-07 22:15:00   2017-11-07 22:45:32   \n",
       "716    103094220         1  2017-12-06 05:19:50   2017-12-06 05:53:52   \n",
       "718     66115834         1  2017-08-04 17:53:34   2017-08-04 18:50:56   \n",
       "781     55934137         2  2017-06-09 09:31:25   2017-06-09 10:24:10   \n",
       "815     13731926         2  2017-02-21 06:11:03   2017-02-21 06:59:39   \n",
       "817     52277743         2  2017-06-20 08:15:18   2017-06-20 10:24:37   \n",
       "834      2684305         2  2017-01-10 22:29:47   2017-01-10 23:06:46   \n",
       "839     90860814         2  2017-10-27 21:50:00   2017-10-27 22:35:04   \n",
       "860    106575186         1  2017-12-16 06:39:59   2017-12-16 07:07:59   \n",
       "880    110495611         2  2017-12-30 05:25:29   2017-12-30 06:01:29   \n",
       "957     87017503         1  2017-10-15 22:39:12   2017-10-15 23:14:22   \n",
       "969     12762608         2  2017-02-17 20:39:42   2017-02-17 21:13:29   \n",
       "983     71264442         1  2017-08-23 18:23:26   2017-08-23 19:18:29   \n",
       "1081    11006300         2  2017-02-07 17:20:19   2017-02-07 17:34:41   \n",
       "1096    68882036         2  2017-08-14 23:01:15   2017-08-14 23:03:35   \n",
       "1109    74720333         1  2017-09-06 10:46:17   2017-09-06 11:44:41   \n",
       "1178    51937907         2  2017-06-19 06:23:13   2017-06-19 07:03:53   \n",
       "\n",
       "      passenger_count  trip_distance  RatecodeID store_and_fwd_flag  \\\n",
       "11                  2          18.90           2                  N   \n",
       "110                 1          18.00           2                  N   \n",
       "161                 1           0.23           2                  N   \n",
       "247                 1          18.93           2                  N   \n",
       "378                 1          17.99           2                  N   \n",
       "387                 1          18.40           2                  N   \n",
       "405                 1           4.73           2                  N   \n",
       "448                 2          18.21           2                  N   \n",
       "467                 1          17.27           2                  N   \n",
       "519                 6          18.34           2                  N   \n",
       "568                 1          18.65           2                  N   \n",
       "571                 1           0.00           2                  N   \n",
       "585                 1          17.76           2                  N   \n",
       "691                 2          16.97           2                  N   \n",
       "716                 1          20.80           2                  N   \n",
       "718                 1          21.60           2                  N   \n",
       "781                 2          18.81           2                  N   \n",
       "815                 5          16.94           2                  N   \n",
       "817                 1          17.77           2                  N   \n",
       "834                 1          18.57           2                  N   \n",
       "839                 1          22.43           2                  N   \n",
       "860                 2          17.80           2                  N   \n",
       "880                 6          18.23           2                  N   \n",
       "957                 1          21.80           2                  N   \n",
       "969                 1          19.57           2                  N   \n",
       "983                 1          16.70           2                  N   \n",
       "1081                1           1.09           2                  N   \n",
       "1096                5           2.12           2                  N   \n",
       "1109                1          19.10           2                  N   \n",
       "1178                6          19.77           2                  N   \n",
       "\n",
       "      PULocationID  DOLocationID  payment_type  fare_amount  extra  mta_tax  \\\n",
       "11             236           132             1         52.0    0.0      0.5   \n",
       "110            132           163             1         52.0    0.0      0.5   \n",
       "161            132           132             2         52.0    0.0      0.5   \n",
       "247            132            79             2         52.0    0.0      0.5   \n",
       "378            132           234             1         52.0    0.0      0.5   \n",
       "387            132            48             2         52.0    4.5      0.5   \n",
       "405            228            88             2         52.0    0.0      0.5   \n",
       "448            132            48             2         52.0    0.0      0.5   \n",
       "467            186           132             2         52.0    0.0      0.5   \n",
       "519            132           148             1         52.0    0.0      0.5   \n",
       "568            132           144             1         52.0    0.0      0.5   \n",
       "571            230           161             1         52.0    0.0      0.5   \n",
       "585            211           132             1         52.0    0.0      0.5   \n",
       "691            132           170             1         52.0    0.0      0.5   \n",
       "716            132           239             1         52.0    0.0      0.5   \n",
       "718            264           264             1         52.0    4.5      0.5   \n",
       "781            163           132             1         52.0    0.0      0.5   \n",
       "815            132           170             1         52.0    0.0      0.5   \n",
       "817            132           246             1         52.0    0.0      0.5   \n",
       "834            132            48             1         52.0    0.0      0.5   \n",
       "839            132           163             2         52.0    0.0      0.5   \n",
       "860             75           132             1         52.0    0.0      0.5   \n",
       "880             68           132             2         52.0    0.0      0.5   \n",
       "957            132           261             2         52.0    0.0      0.5   \n",
       "969            132           140             1         52.0    0.0      0.5   \n",
       "983            132           230             1         52.0    4.5      0.5   \n",
       "1081           170            48             2         52.0    4.5      0.5   \n",
       "1096           265           265             2         52.0    0.0      0.5   \n",
       "1109           239           132             1         52.0    0.0      0.5   \n",
       "1178           238           132             1         52.0    0.0      0.5   \n",
       "\n",
       "      tip_amount  tolls_amount  improvement_surcharge  total_amount  \\\n",
       "11         14.58          5.54                    0.3         72.92   \n",
       "110         0.00          0.00                    0.3         52.80   \n",
       "161         0.00          0.00                    0.3         52.80   \n",
       "247         0.00          0.00                    0.3         52.80   \n",
       "378        14.64          5.76                    0.3         73.20   \n",
       "387         0.00          5.54                    0.3         62.84   \n",
       "405         0.00          5.76                    0.3         58.56   \n",
       "448         0.00          5.76                    0.3         58.56   \n",
       "467         0.00          5.76                    0.3         58.56   \n",
       "519         5.00          0.00                    0.3         57.80   \n",
       "568        10.56          0.00                    0.3         63.36   \n",
       "571        11.71          5.76                    0.3         70.27   \n",
       "585        11.71          5.76                    0.3         70.27   \n",
       "691        11.71          5.76                    0.3         70.27   \n",
       "716         5.85          5.76                    0.3         64.41   \n",
       "718        12.60          5.76                    0.3         75.66   \n",
       "781        13.20          0.00                    0.3         66.00   \n",
       "815         2.00          5.54                    0.3         60.34   \n",
       "817        11.71          5.76                    0.3         70.27   \n",
       "834        13.20          0.00                    0.3         66.00   \n",
       "839         0.00          5.76                    0.3         58.56   \n",
       "860         6.00          5.76                    0.3         64.56   \n",
       "880         0.00          0.00                    0.3         52.80   \n",
       "957         0.00          0.00                    0.3         52.80   \n",
       "969        11.67          5.54                    0.3         70.01   \n",
       "983        42.29          0.00                    0.3         99.59   \n",
       "1081        0.00          5.54                    0.3         62.84   \n",
       "1096        0.00          0.00                    0.3         52.80   \n",
       "1109       15.80          0.00                    0.3         68.60   \n",
       "1178       17.57          5.76                    0.3         76.13   \n",
       "\n",
       "       duration pickup_dropoff  mean_trip_distance  mean_duration        day  \\\n",
       "11    36.800000      236 - 132           19.211667      40.483333     Sunday   \n",
       "110   66.850000      132 - 163           19.229000      52.941667   Saturday   \n",
       "161    0.966667      132 - 132            2.255862       3.021839   Saturday   \n",
       "247   29.183333       132 - 79           19.431667      47.275000  Wednesday   \n",
       "378   29.483333      132 - 234           17.654000      49.833333     Sunday   \n",
       "387   39.833333       132 - 48           18.761905      58.241270    Tuesday   \n",
       "405   15.616667       228 - 88            4.730000      15.616667     Monday   \n",
       "448   45.450000       132 - 48           18.761905      58.241270   Thursday   \n",
       "467   42.850000      186 - 132           17.096000      42.920000    Tuesday   \n",
       "519   71.583333      132 - 148           17.994286      46.340476     Sunday   \n",
       "568   28.883333      132 - 144           18.537500      37.000000  Wednesday   \n",
       "571    0.216667      230 - 161            0.685484       7.965591    Tuesday   \n",
       "585   55.700000      211 - 132           16.580000      61.691667     Monday   \n",
       "691   30.533333      132 - 170           17.203000      37.113333    Tuesday   \n",
       "716   34.033333      132 - 239           20.901250      44.862500  Wednesday   \n",
       "718   57.366667      264 - 264            3.191516      15.617690     Friday   \n",
       "781   52.750000      163 - 132           17.275833      52.330556     Friday   \n",
       "815   48.600000      132 - 170           17.203000      37.113333    Tuesday   \n",
       "817   88.683333      132 - 246           18.515000      66.266667    Tuesday   \n",
       "834   36.983333       132 - 48           18.761905      58.241270    Tuesday   \n",
       "839   45.066667      132 - 163           19.229000      52.941667     Friday   \n",
       "860   28.000000       75 - 132           18.442500      36.204167   Saturday   \n",
       "880   36.000000       68 - 132           18.785000      58.016667   Saturday   \n",
       "957   35.166667      132 - 261           22.115000      51.493750     Sunday   \n",
       "969   33.783333      132 - 140           19.293333      36.791667     Friday   \n",
       "983   55.050000      132 - 230           18.571200      59.590000  Wednesday   \n",
       "1081  14.366667       170 - 48            1.265789      14.135965    Tuesday   \n",
       "1096   2.333333      265 - 265            0.753077       3.411538     Monday   \n",
       "1109  58.400000      239 - 132           19.795000      50.562500  Wednesday   \n",
       "1178  40.666667      238 - 132           19.470000      53.861111     Monday   \n",
       "\n",
       "          month  rush_hour  \n",
       "11        March          0  \n",
       "110        June          0  \n",
       "161    November          0  \n",
       "247    December          0  \n",
       "378   September          0  \n",
       "387    February          1  \n",
       "405        June          0  \n",
       "448      August          0  \n",
       "467   September          0  \n",
       "519       April          0  \n",
       "568    November          0  \n",
       "571        July          0  \n",
       "585        June          0  \n",
       "691    November          0  \n",
       "716    December          0  \n",
       "718      August          1  \n",
       "781        June          1  \n",
       "815    February          1  \n",
       "817        June          1  \n",
       "834     January          0  \n",
       "839     October          0  \n",
       "860    December          0  \n",
       "880    December          0  \n",
       "957     October          0  \n",
       "969    February          0  \n",
       "983      August          1  \n",
       "1081   February          1  \n",
       "1096     August          0  \n",
       "1109  September          0  \n",
       "1178       June          1  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Examine the first 30 of the trips which fare amount is 52. \n",
    "pd.set_option('display.max_columns', None)\n",
    "mask = df[\"fare_amount\"] == 52\n",
    "df[mask].head(30)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: It seems that almost all of the trips in the first 30 rows where the fare amount was $52 either begin or end at location 132, and all of them have a RatecodeID of 2.\n",
    "\n",
    "There is no readily apparent reason why PULocation 132 should have so many fares of 52 dollars. They seem to occur on all different days, at different times, with both vendors, in all months. However, there are many toll amounts of  5.76and\n",
    " 5.54. This would seem to indicate that location 132 is in an area that frequently requires tolls to get to and from. It's likely this is an airport.\n",
    "\n",
    "The data dictionary says that RatecodeID of 2 indicates trips for JFK, which is John F. Kennedy International Airport. A quick Google search for \"new york city taxi flat rate $52\" indicates that in 2017 (the year that this data was collected) there was indeed a flat fare for taxi trips between JFK airport (in Queens) and Manhattan.\n",
    "\n",
    "Because RatecodeID is known from the data dictionary, the values for this rate code can be imputed back into the data after the model makes its predictions. This way you know that those data points will always be correct."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 5. Isolate modeling variables\n",
    "\n",
    "Drop features that are redundant, irrelevant, or that will not be available in a deployed environment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 22685 entries, 0 to 22684\n",
      "Data columns (total 25 columns):\n",
      " #   Column                 Non-Null Count  Dtype         \n",
      "---  ------                 --------------  -----         \n",
      " 0   Unnamed: 0             22685 non-null  int64         \n",
      " 1   VendorID               22685 non-null  int64         \n",
      " 2   tpep_pickup_datetime   22685 non-null  datetime64[ns]\n",
      " 3   tpep_dropoff_datetime  22685 non-null  datetime64[ns]\n",
      " 4   passenger_count        22685 non-null  int64         \n",
      " 5   trip_distance          22685 non-null  float64       \n",
      " 6   RatecodeID             22685 non-null  int64         \n",
      " 7   store_and_fwd_flag     22685 non-null  object        \n",
      " 8   PULocationID           22685 non-null  int64         \n",
      " 9   DOLocationID           22685 non-null  int64         \n",
      " 10  payment_type           22685 non-null  int64         \n",
      " 11  fare_amount            22685 non-null  float64       \n",
      " 12  extra                  22685 non-null  float64       \n",
      " 13  mta_tax                22685 non-null  float64       \n",
      " 14  tip_amount             22685 non-null  float64       \n",
      " 15  tolls_amount           22685 non-null  float64       \n",
      " 16  improvement_surcharge  22685 non-null  float64       \n",
      " 17  total_amount           22685 non-null  float64       \n",
      " 18  duration               22685 non-null  float64       \n",
      " 19  pickup_dropoff         22685 non-null  object        \n",
      " 20  mean_trip_distance     22685 non-null  float64       \n",
      " 21  mean_duration          22685 non-null  float64       \n",
      " 22  day                    22685 non-null  object        \n",
      " 23  month                  22685 non-null  object        \n",
      " 24  rush_hour              22685 non-null  int64         \n",
      "dtypes: datetime64[ns](2), float64(11), int64(8), object(4)\n",
      "memory usage: 4.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 22685 entries, 0 to 22684\n",
      "Data columns (total 6 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   VendorID            22685 non-null  int64  \n",
      " 1   passenger_count     22685 non-null  int64  \n",
      " 2   fare_amount         22685 non-null  float64\n",
      " 3   mean_trip_distance  22685 non-null  float64\n",
      " 4   mean_duration       22685 non-null  float64\n",
      " 5   rush_hour           22685 non-null  int64  \n",
      "dtypes: float64(3), int64(3)\n",
      "memory usage: 1.2 MB\n"
     ]
    }
   ],
   "source": [
    "df2 = df[[\"VendorID\", \"passenger_count\", \"fare_amount\", \"mean_trip_distance\", \"mean_duration\",\"rush_hour\"]]\n",
    "df2.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 6. Pair plot\n",
    "\n",
    "Create a pairplot to visualize pairwise relationships between `fare_amount`, `mean_duration`, and `mean_distance`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 540x540 with 12 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a pairplot to visualize pairwise relationships between variables in the data\n",
    "sns.pairplot(df2[[\"fare_amount\", \"mean_trip_distance\", \"mean_duration\"]])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: These variables all show linear correlation with each other. Investigate this further."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 7. Identify correlations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, code a correlation matrix to help determine most correlated variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>mean_trip_distance</th>\n",
       "      <th>mean_duration</th>\n",
       "      <th>rush_hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>VendorID</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.266591</td>\n",
       "      <td>0.001721</td>\n",
       "      <td>0.005085</td>\n",
       "      <td>0.002247</td>\n",
       "      <td>-0.002689</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>passenger_count</th>\n",
       "      <td>0.266591</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.015040</td>\n",
       "      <td>0.013476</td>\n",
       "      <td>0.016060</td>\n",
       "      <td>-0.021984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fare_amount</th>\n",
       "      <td>0.001721</td>\n",
       "      <td>0.015040</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.910246</td>\n",
       "      <td>0.859106</td>\n",
       "      <td>-0.020344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean_trip_distance</th>\n",
       "      <td>0.005085</td>\n",
       "      <td>0.013476</td>\n",
       "      <td>0.910246</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.874974</td>\n",
       "      <td>-0.039859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean_duration</th>\n",
       "      <td>0.002247</td>\n",
       "      <td>0.016060</td>\n",
       "      <td>0.859106</td>\n",
       "      <td>0.874974</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.021863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rush_hour</th>\n",
       "      <td>-0.002689</td>\n",
       "      <td>-0.021984</td>\n",
       "      <td>-0.020344</td>\n",
       "      <td>-0.039859</td>\n",
       "      <td>-0.021863</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    VendorID  passenger_count  fare_amount  \\\n",
       "VendorID            1.000000         0.266591     0.001721   \n",
       "passenger_count     0.266591         1.000000     0.015040   \n",
       "fare_amount         0.001721         0.015040     1.000000   \n",
       "mean_trip_distance  0.005085         0.013476     0.910246   \n",
       "mean_duration       0.002247         0.016060     0.859106   \n",
       "rush_hour          -0.002689        -0.021984    -0.020344   \n",
       "\n",
       "                    mean_trip_distance  mean_duration  rush_hour  \n",
       "VendorID                      0.005085       0.002247  -0.002689  \n",
       "passenger_count               0.013476       0.016060  -0.021984  \n",
       "fare_amount                   0.910246       0.859106  -0.020344  \n",
       "mean_trip_distance            1.000000       0.874974  -0.039859  \n",
       "mean_duration                 0.874974       1.000000  -0.021863  \n",
       "rush_hour                    -0.039859      -0.021863   1.000000  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the Pearson correlation matrix\n",
    "correlation_matrix = df2.corr()\n",
    "correlation_matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize a correlation heatmap of the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create correlation heatmap\n",
    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: `mean_duration` and `mean_distance` are both highly correlated with the target variable of fare_amount They're also both correlated with each other, with a Pearson correlation of 0.87.\n",
    "\n",
    "Though the highly correlated predictor variables can be bad for linear regression models. However, the prediction itself is more important in this case. Therefore, keep modeling with both variables even though they are correlated. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "P_QYzJfVUrIc"
   },
   "source": [
    "### Task 8a. Split data into outcome variable and features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set your X and y variables. X represents the features and y represents the outcome (target) variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VendorID</th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>mean_trip_distance</th>\n",
       "      <th>mean_duration</th>\n",
       "      <th>rush_hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>3.521667</td>\n",
       "      <td>22.847222</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3.108889</td>\n",
       "      <td>24.470370</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.881429</td>\n",
       "      <td>7.250000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3.700000</td>\n",
       "      <td>30.250000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4.435000</td>\n",
       "      <td>14.616667</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   VendorID  passenger_count  mean_trip_distance  mean_duration  rush_hour\n",
       "0         2                6            3.521667      22.847222          0\n",
       "1         1                1            3.108889      24.470370          0\n",
       "2         1                1            0.881429       7.250000          1\n",
       "3         2                1            3.700000      30.250000          0\n",
       "4         2                1            4.435000      14.616667          0"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove the target column from the features\n",
    "X = df2.drop(columns='fare_amount')\n",
    "\n",
    "# Set y variable\n",
    "y = df2[[\"fare_amount\"]]\n",
    "\n",
    "# Display first few rows\n",
    "X.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "o3ArC_5xa7Oi"
   },
   "source": [
    "### Task 8b. Pre-process data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "PdfTaopCcbTj"
   },
   "source": [
    "Dummy encode categorical variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "id": "4Y3T2poF28fP"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>mean_trip_distance</th>\n",
       "      <th>mean_duration</th>\n",
       "      <th>rush_hour</th>\n",
       "      <th>VendorID_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>3.521667</td>\n",
       "      <td>22.847222</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>3.108889</td>\n",
       "      <td>24.470370</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0.881429</td>\n",
       "      <td>7.250000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3.700000</td>\n",
       "      <td>30.250000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>4.435000</td>\n",
       "      <td>14.616667</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   passenger_count  mean_trip_distance  mean_duration  rush_hour  VendorID_2\n",
       "0                6            3.521667      22.847222          0           1\n",
       "1                1            3.108889      24.470370          0           0\n",
       "2                1            0.881429       7.250000          1           0\n",
       "3                1            3.700000      30.250000          0           1\n",
       "4                1            4.435000      14.616667          0           1"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert VendorID to string\n",
    "X[\"VendorID\"] = X[\"VendorID\"].astype(str)\n",
    "\n",
    "# Get dummies\n",
    "X = pd.get_dummies(X, drop_first=True)\n",
    "X.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Split data into training and test sets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create training and testing sets. The test set should contain 20% of the total samples. Set `random_state=0`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "id": "A2BNUvacwaZY"
   },
   "outputs": [],
   "source": [
    "# Create training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "iDYyjWssbnBG"
   },
   "source": [
    "### Standardize the data\n",
    "\n",
    "Standardize the `X_train` variables. Assign the results to a variable called `X_train_scaled`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>mean_trip_distance</th>\n",
       "      <th>mean_duration</th>\n",
       "      <th>rush_hour</th>\n",
       "      <th>VendorID_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.494910</td>\n",
       "      <td>-0.541089</td>\n",
       "      <td>-0.828269</td>\n",
       "      <td>-0.647327</td>\n",
       "      <td>-1.114396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.288827</td>\n",
       "      <td>0.025611</td>\n",
       "      <td>0.888709</td>\n",
       "      <td>1.544815</td>\n",
       "      <td>-1.114396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.494910</td>\n",
       "      <td>-0.588687</td>\n",
       "      <td>-0.981131</td>\n",
       "      <td>-0.647327</td>\n",
       "      <td>-1.114396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.288827</td>\n",
       "      <td>0.214159</td>\n",
       "      <td>1.021994</td>\n",
       "      <td>-0.647327</td>\n",
       "      <td>0.897347</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.494910</td>\n",
       "      <td>0.466848</td>\n",
       "      <td>1.182599</td>\n",
       "      <td>-0.647327</td>\n",
       "      <td>0.897347</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18143</th>\n",
       "      <td>1.072564</td>\n",
       "      <td>1.120949</td>\n",
       "      <td>0.776948</td>\n",
       "      <td>-0.647327</td>\n",
       "      <td>-1.114396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18144</th>\n",
       "      <td>-0.494910</td>\n",
       "      <td>-0.111455</td>\n",
       "      <td>-0.134779</td>\n",
       "      <td>-0.647327</td>\n",
       "      <td>-1.114396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18145</th>\n",
       "      <td>0.288827</td>\n",
       "      <td>-0.248357</td>\n",
       "      <td>-0.199040</td>\n",
       "      <td>-0.647327</td>\n",
       "      <td>0.897347</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18146</th>\n",
       "      <td>-0.494910</td>\n",
       "      <td>-0.576883</td>\n",
       "      <td>-0.505044</td>\n",
       "      <td>-0.647327</td>\n",
       "      <td>-1.114396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18147</th>\n",
       "      <td>1.072564</td>\n",
       "      <td>-0.482363</td>\n",
       "      <td>-0.814095</td>\n",
       "      <td>-0.647327</td>\n",
       "      <td>-1.114396</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>18148 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       passenger_count  mean_trip_distance  mean_duration  rush_hour  \\\n",
       "0            -0.494910           -0.541089      -0.828269  -0.647327   \n",
       "1             0.288827            0.025611       0.888709   1.544815   \n",
       "2            -0.494910           -0.588687      -0.981131  -0.647327   \n",
       "3             0.288827            0.214159       1.021994  -0.647327   \n",
       "4            -0.494910            0.466848       1.182599  -0.647327   \n",
       "...                ...                 ...            ...        ...   \n",
       "18143         1.072564            1.120949       0.776948  -0.647327   \n",
       "18144        -0.494910           -0.111455      -0.134779  -0.647327   \n",
       "18145         0.288827           -0.248357      -0.199040  -0.647327   \n",
       "18146        -0.494910           -0.576883      -0.505044  -0.647327   \n",
       "18147         1.072564           -0.482363      -0.814095  -0.647327   \n",
       "\n",
       "       VendorID_2  \n",
       "0       -1.114396  \n",
       "1       -1.114396  \n",
       "2       -1.114396  \n",
       "3        0.897347  \n",
       "4        0.897347  \n",
       "...           ...  \n",
       "18143   -1.114396  \n",
       "18144   -1.114396  \n",
       "18145    0.897347  \n",
       "18146   -1.114396  \n",
       "18147   -1.114396  \n",
       "\n",
       "[18148 rows x 5 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Standardize the X training data\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = pd.DataFrame(scaler.fit_transform(X_train))\n",
    "X_train_scaled.columns = X_train.columns\n",
    "X_train_scaled  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>passenger_count</th>\n",
       "      <th>mean_trip_distance</th>\n",
       "      <th>mean_duration</th>\n",
       "      <th>rush_hour</th>\n",
       "      <th>VendorID_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.511604</td>\n",
       "      <td>1.239032</td>\n",
       "      <td>0.621272</td>\n",
       "      <td>1.516455</td>\n",
       "      <td>0.879180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.519222</td>\n",
       "      <td>-0.359141</td>\n",
       "      <td>-0.351639</td>\n",
       "      <td>-0.659433</td>\n",
       "      <td>0.879180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.519222</td>\n",
       "      <td>-0.279944</td>\n",
       "      <td>-0.238440</td>\n",
       "      <td>1.516455</td>\n",
       "      <td>0.879180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.511604</td>\n",
       "      <td>1.302758</td>\n",
       "      <td>0.541919</td>\n",
       "      <td>1.516455</td>\n",
       "      <td>0.879180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.519222</td>\n",
       "      <td>-0.624814</td>\n",
       "      <td>-0.336398</td>\n",
       "      <td>1.516455</td>\n",
       "      <td>-1.137423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4532</th>\n",
       "      <td>0.238485</td>\n",
       "      <td>0.959190</td>\n",
       "      <td>1.042294</td>\n",
       "      <td>-0.659433</td>\n",
       "      <td>-1.137423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4533</th>\n",
       "      <td>-0.519222</td>\n",
       "      <td>0.853903</td>\n",
       "      <td>0.162423</td>\n",
       "      <td>-0.659433</td>\n",
       "      <td>0.879180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4534</th>\n",
       "      <td>0.238485</td>\n",
       "      <td>-0.248533</td>\n",
       "      <td>0.421542</td>\n",
       "      <td>1.516455</td>\n",
       "      <td>-1.137423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4535</th>\n",
       "      <td>-0.519222</td>\n",
       "      <td>-0.512058</td>\n",
       "      <td>-0.517065</td>\n",
       "      <td>1.516455</td>\n",
       "      <td>-1.137423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4536</th>\n",
       "      <td>-0.519222</td>\n",
       "      <td>-0.338007</td>\n",
       "      <td>-0.171435</td>\n",
       "      <td>-0.659433</td>\n",
       "      <td>-1.137423</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4537 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      passenger_count  mean_trip_distance  mean_duration  rush_hour  \\\n",
       "0            2.511604            1.239032       0.621272   1.516455   \n",
       "1           -0.519222           -0.359141      -0.351639  -0.659433   \n",
       "2           -0.519222           -0.279944      -0.238440   1.516455   \n",
       "3            2.511604            1.302758       0.541919   1.516455   \n",
       "4           -0.519222           -0.624814      -0.336398   1.516455   \n",
       "...               ...                 ...            ...        ...   \n",
       "4532         0.238485            0.959190       1.042294  -0.659433   \n",
       "4533        -0.519222            0.853903       0.162423  -0.659433   \n",
       "4534         0.238485           -0.248533       0.421542   1.516455   \n",
       "4535        -0.519222           -0.512058      -0.517065   1.516455   \n",
       "4536        -0.519222           -0.338007      -0.171435  -0.659433   \n",
       "\n",
       "      VendorID_2  \n",
       "0       0.879180  \n",
       "1       0.879180  \n",
       "2       0.879180  \n",
       "3       0.879180  \n",
       "4      -1.137423  \n",
       "...          ...  \n",
       "4532   -1.137423  \n",
       "4533    0.879180  \n",
       "4534   -1.137423  \n",
       "4535   -1.137423  \n",
       "4536   -1.137423  \n",
       "\n",
       "[4537 rows x 5 columns]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Standardize the X test data\n",
    "X_test_scaled = pd.DataFrame(scaler.fit_transform(X_test))\n",
    "X_test_scaled.columns = X_test.columns\n",
    "X_test_scaled  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "HMj6QkK1cLmS"
   },
   "source": [
    "### Task 8c. Fit and evaluate model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "HMj6QkK1cLmS"
   },
   "source": [
    "#### 1st model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:            fare_amount   R-squared:                       0.840\n",
      "Model:                            OLS   Adj. R-squared:                  0.840\n",
      "Method:                 Least Squares   F-statistic:                 1.912e+04\n",
      "Date:                Thu, 30 May 2024   Prob (F-statistic):               0.00\n",
      "Time:                        07:35:27   Log-Likelihood:                -51830.\n",
      "No. Observations:               18148   AIC:                         1.037e+05\n",
      "Df Residuals:                   18142   BIC:                         1.037e+05\n",
      "Df Model:                           5                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "======================================================================================\n",
      "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------\n",
      "Intercept             12.8918      0.031    412.631      0.000      12.831      12.953\n",
      "passenger_count        0.0344      0.032      1.060      0.289      -0.029       0.098\n",
      "mean_trip_distance     7.1637      0.065    110.962      0.000       7.037       7.290\n",
      "mean_duration          2.7505      0.065     42.627      0.000       2.624       2.877\n",
      "rush_hour              0.1202      0.031      3.843      0.000       0.059       0.182\n",
      "VendorID_2            -0.0269      0.032     -0.830      0.406      -0.090       0.037\n",
      "==============================================================================\n",
      "Omnibus:                    21168.868   Durbin-Watson:                   1.984\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          3232672.174\n",
      "Skew:                           6.060   Prob(JB):                         0.00\n",
      "Kurtosis:                      67.251   Cond. No.                         3.88\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "training data\n",
      "R-squared : 0.84\n",
      "Mean Absolute Error (MAE): 2.18\n",
      "Mean Squared Error (MSE): 17.71\n",
      "Root Mean Squared Error (RMSE): 4.21\n",
      "\n",
      "Testing data\n",
      "R-squared : 0.84\n",
      "Mean Absolute Error (MAE): 2.18\n",
      "Mean Squared Error (MSE): 17.71\n",
      "Root Mean Squared Error (RMSE): 3.88\n"
     ]
    }
   ],
   "source": [
    "# Combine standardized features\n",
    "data_std_scaled = pd.concat([X_train_scaled, y_train.reset_index()], axis=1) \n",
    "\n",
    "# Fit 1st model to the training data\n",
    "formula = \"fare_amount ~ + passenger_count + mean_trip_distance + mean_duration + rush_hour + VendorID_2\"\n",
    "model_1 = sm.formula.ols(formula, data_std_scaled).fit()\n",
    "print(model_1.summary())\n",
    "\n",
    "# Calcuate evluation metrics for training data\n",
    "print(\"training data\")\n",
    "model_1_predictions = model_1.predict(data_std_scaled)\n",
    "\n",
    "# Calculate and print r2\n",
    "model_1_r2 = r2_score(y_train, model_1_predictions)\n",
    "print(f\"R-squared : {model_1_r2:.2f}\")\n",
    "# Calculate and print MAE\n",
    "model_1_mae = mean_absolute_error(y_train, model_1_predictions)\n",
    "print(f\"Mean Absolute Error (MAE): {model_1_mae:.2f}\")\n",
    "# Calculate and print MSE\n",
    "model_1_mse = mean_squared_error(y_train, model_1_predictions)\n",
    "print(f\"Mean Squared Error (MSE): {model_1_mse:.2f}\")\n",
    "# Calculate and print RMSE (square root of MSE)\n",
    "model_1_rmse = np.sqrt(model_1_mse)\n",
    "print(f\"Root Mean Squared Error (RMSE): {model_1_rmse:.2f}\")\n",
    "print()\n",
    "\n",
    "# Calcuate evluation metrics for testing data\n",
    "print(\"Testing data\")\n",
    "test_data_std_scaled = pd.concat([X_test_scaled, y_test.reset_index()], axis=1) \n",
    "model_1_test_data_predictions = model_1.predict(test_data_std_scaled)\n",
    "\n",
    "# Calculate and print r2\n",
    "model_1_test_data_r2 = r2_score(y_test, model_1_test_data_predictions)\n",
    "print(f\"R-squared : {model_1_r2:.2f}\")\n",
    "# Calculate and print MAE\n",
    "model_1_test_data_mae = mean_absolute_error(y_test, model_1_test_data_predictions)\n",
    "print(f\"Mean Absolute Error (MAE): {model_1_mae:.2f}\")\n",
    "# Calculate and print MSE\n",
    "model_1_test_data_mse = mean_squared_error(y_test, model_1_test_data_predictions)\n",
    "print(f\"Mean Squared Error (MSE): {model_1_mse:.2f}\")\n",
    "# Calculate and print RMSE (square root of MSE)\n",
    "model_1_test_data_rmse = np.sqrt(model_1_test_data_mse)\n",
    "print(f\"Root Mean Squared Error (RMSE): {model_1_test_data_rmse:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: The model performance is high on both training and test sets, suggesting that there is little bias in the model and that the model is not overfit. In fact, the test scores were even better than the training scores.\n",
    "\n",
    "For the test data, an R2 of 0.84 means that 84% of the variance in the fare_amount variable is described by the model.\n",
    "\n",
    "Consider the `passenger_count` and `VendorID` are not significnat for level of 5%, which revealed that `passenger_count` and `VendorID` have low importance. Therefore, remove these two features and rebuild model to assess if performance improves due to a more focused feature set."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2nd model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:            fare_amount   R-squared:                       0.840\n",
      "Model:                            OLS   Adj. R-squared:                  0.840\n",
      "Method:                 Least Squares   F-statistic:                 3.186e+04\n",
      "Date:                Thu, 30 May 2024   Prob (F-statistic):               0.00\n",
      "Time:                        07:35:28   Log-Likelihood:                -51831.\n",
      "No. Observations:               18148   AIC:                         1.037e+05\n",
      "Df Residuals:                   18144   BIC:                         1.037e+05\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "======================================================================================\n",
      "                         coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------\n",
      "Intercept             12.8918      0.031    412.637      0.000      12.831      12.953\n",
      "mean_trip_distance     7.1635      0.065    110.962      0.000       7.037       7.290\n",
      "mean_duration          2.7509      0.065     42.636      0.000       2.624       2.877\n",
      "rush_hour              0.1196      0.031      3.822      0.000       0.058       0.181\n",
      "==============================================================================\n",
      "Omnibus:                    21167.299   Durbin-Watson:                   1.984\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):          3231015.121\n",
      "Skew:                           6.059   Prob(JB):                         0.00\n",
      "Kurtosis:                      67.234   Cond. No.                         3.88\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "R-squared : 0.84\n",
      "Mean Absolute Error (MAE): 2.18\n",
      "Mean Squared Error (MSE): 17.71\n",
      "Root Mean Squared Error (RMSE): 4.21\n",
      "\n",
      "test data\n",
      "R-squared : 0.84\n",
      "Mean Absolute Error (MAE): 2.18\n",
      "Mean Squared Error (MSE): 17.71\n",
      "Root Mean Squared Error (RMSE): 3.88\n"
     ]
    }
   ],
   "source": [
    "# Fit 2nd model to the training data\n",
    "formula = \"fare_amount ~ + mean_trip_distance + mean_duration + rush_hour\"\n",
    "model_2 = sm.formula.ols(formula, data_std_scaled).fit()\n",
    "print(model_2.summary())\n",
    "\n",
    "# Calcuate evluation metrics for training data\n",
    "model_2_predictions = model_2.predict(data_std_scaled)\n",
    "\n",
    "# Calculate and print r2\n",
    "model_2_r2 = r2_score(y_train, model_2_predictions)\n",
    "print(f\"R-squared : {model_1_r2:.2f}\")\n",
    "# Calculate and print MAE\n",
    "model_2_mae = mean_absolute_error(y_train, model_2_predictions)\n",
    "print(f\"Mean Absolute Error (MAE): {model_2_mae:.2f}\")\n",
    "# Calculate and print MSE\n",
    "model_2_mse = mean_squared_error(y_train, model_2_predictions)\n",
    "print(f\"Mean Squared Error (MSE): {model_2_mse:.2f}\")\n",
    "# Calculate and print RMSE (square root of MSE)\n",
    "model_2_rmse = np.sqrt(model_2_mse)\n",
    "print(f\"Root Mean Squared Error (RMSE): {model_2_rmse:.2f}\")\n",
    "\n",
    "print()\n",
    "print(\"test data\")\n",
    "model_2_test_data_predictions = model_2.predict(test_data_std_scaled)\n",
    "# Calculate and print r2\n",
    "model_2_test_data_r2 = r2_score(y_test, model_2_test_data_predictions)\n",
    "print(f\"R-squared : {model_2_r2:.2f}\")\n",
    "# Calculate and print MAE\n",
    "model_2_test_data_mae = mean_absolute_error(y_test, model_2_test_data_predictions)\n",
    "print(f\"Mean Absolute Error (MAE): {model_2_mae:.2f}\")\n",
    "# Calculate and print MSE\n",
    "model_2_test_data_mse = mean_squared_error(y_test, model_2_test_data_predictions)\n",
    "print(f\"Mean Squared Error (MSE): {model_2_mse:.2f}\")\n",
    "# Calculate and print RMSE (square root of MSE)\n",
    "model_2_test_data_rmse = np.sqrt(model_2_test_data_mse)\n",
    "print(f\"Root Mean Squared Error (RMSE): {model_2_test_data_rmse:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: While removing `passenger_count` and `VendorID` did not result in significant performance improvement, we've opted to retain these features in the first model for the sake of model interpretability. These features provide valuable insights into the factors affecting fare amounts, even if their statistical significance is below the 5% threshold.\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "F_l3bkxQdJ3a"
   },
   "source": [
    "### Task 9a. Results\n",
    "\n",
    "Use the code cell below to get `actual`,`predicted`, and `residual` for the testing set, and store them as columns in a `results` dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "id": "cSl5gbXfBPBN"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>actual</th>\n",
       "      <th>predicted</th>\n",
       "      <th>residual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>295</th>\n",
       "      <td>24.0</td>\n",
       "      <td>23.721717</td>\n",
       "      <td>0.278283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13757</th>\n",
       "      <td>9.5</td>\n",
       "      <td>9.231055</td>\n",
       "      <td>0.268945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4142</th>\n",
       "      <td>11.0</td>\n",
       "      <td>10.371379</td>\n",
       "      <td>0.628621</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3015</th>\n",
       "      <td>22.0</td>\n",
       "      <td>23.959979</td>\n",
       "      <td>-1.959979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13845</th>\n",
       "      <td>6.0</td>\n",
       "      <td>7.685661</td>\n",
       "      <td>-1.685661</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       actual  predicted  residual\n",
       "295      24.0  23.721717  0.278283\n",
       "13757     9.5   9.231055  0.268945\n",
       "4142     11.0  10.371379  0.628621\n",
       "3015     22.0  23.959979 -1.959979\n",
       "13845     6.0   7.685661 -1.685661"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a `results` dataframe\n",
    "results = pd.DataFrame(data={'actual': y_test[\"fare_amount\"],\n",
    "                             'predicted': model_1_test_data_predictions.ravel()})\n",
    "results['residual'] = results['actual'] - results['predicted']\n",
    "results.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mwRmSDS3eyeH"
   },
   "source": [
    "### Task 9b. Visualize model results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "y3vQ-mB51dfd"
   },
   "source": [
    "Create a scatterplot to visualize `actual` vs. `predicted`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a scatter plot\n",
    "fig, ax = plt.subplots(figsize=(6, 6))\n",
    "sns.scatterplot(x='actual', y='predicted', data=results)\n",
    "plt.xlabel(\"actual\")\n",
    "plt.ylabel(\"predicted\")\n",
    "plt.title(\"Actual vs. predicted\")\n",
    "plt.grid(True) \n",
    "plt.plot([0,60], [0,60], c='red', linewidth=2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "IbO71S_R9IcY"
   },
   "source": [
    "Visualize the distribution of the `residuals` using a histogram."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "id": "3a0UYoEr9Nx6"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create the histogram\n",
    "sns.histplot(\n",
    "    data=results,\n",
    "    x=\"residual\", \n",
    "    kde=True, \n",
    "    linewidth=0.5,  \n",
    "    alpha=0.7,  \n",
    "    stat=\"density\"  \n",
    ")\n",
    "plt.title('Distribution of the residuals')\n",
    "plt.xlabel('residual value')\n",
    "plt.ylabel('count')\n",
    "plt.grid(True, which='both', linestyle='--', linewidth=0.5)\n",
    "plt.xlim(-15,15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: The distribution of the residuals is approximately normal and has a mean aorund 0. The residuals represent the variance in the outcome variable that is not explained by the model. A normal distribution around zero is good, as it demonstrates that the model's errors are evenly distributed and unbiased."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OCnELck-9h5M"
   },
   "source": [
    "Create a scatterplot of `residuals` over `predicted`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "id": "7Kmr2U8A95fY"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a scatterplot of `residuals` over `predicted`\n",
    "sns.scatterplot(x='predicted', y='residual', data=results)\n",
    "plt.xlabel(\"predicted\")\n",
    "plt.ylabel(\"residual\")\n",
    "plt.title(\"Scatterplot of residuals over predicted values'\")\n",
    "plt.grid(True)\n",
    "plt.axhline(0, c='red')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: The most model's residuals are evenly distributed above and below zero, with the exception of the sloping lines from the upper-left corner to the lower-right corner, which we know are the imputed maximum of 62.50 and the flat rate of 52 for JFK airport trips."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 9c. Coefficients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept             12.891818\n",
       "passenger_count        0.034374\n",
       "mean_trip_distance     7.163740\n",
       "mean_duration          2.750466\n",
       "rush_hour              0.120239\n",
       "VendorID_2            -0.026912\n",
       "dtype: float64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get the model's coefficients. \n",
    "model_1.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.546947522227702\n",
      "2.019691567215725\n"
     ]
    }
   ],
   "source": [
    "# Translate the coefficient of `mean_trip_distance` back to miles instead of standard deviation \n",
    "# 1. Calculate SD of `mean_distance` in X_train data\n",
    "print(X_train['mean_trip_distance'].std())\n",
    "# 2. Divide the model coefficient by the standard deviation\n",
    "print(7.163740 / X_train['mean_trip_distance'].std())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The coefficients reveal that `mean_trip_distance` was the feature with the greatest weight in the model's final prediction. And controlling for other variables, **for every +1 change in standard deviation, the fare amount increases by a mean of 7.13**. In intuitive interpretation: **for every 3.57 miles traveled, the fare increased by a mean of 7.13.** In simpler terms: **for every 1 mile traveled, the fare increased by a mean of 2.00**."
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
